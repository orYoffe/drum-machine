{"version":3,"file":"script.js","sources":["../src/audio/AudioManager.js","../src/config/constants.js","../src/storage/BeatStorage.js","../src/piano/PianoManager.js","../src/sequencer/SequencerManager.js","../src/modals/ModalManager.js","../src/DrumMachine.js","../src/main.js"],"sourcesContent":["/**\n * AudioManager - Handles all Web Audio API operations and audio context lifecycle\n * This class encapsulates all audio-related functionality to improve separation of concerns\n */\nexport class AudioManager {\n  constructor() {\n    this.audioContext = null;\n    this.isInitialized = false;\n    this.audioSources = new Map(); // Track active audio sources\n    this.sampleRate = 44100;\n    this.latencyHint = 'interactive';\n  }\n\n  /**\n   * Initialize the audio context with cross-platform support\n   */\n  async initialize() {\n    try {\n      // Create audio context with better cross-platform support\n      this.audioContext = new (window.AudioContext ||\n        window.webkitAudioContext)({\n        latencyHint: this.latencyHint,\n        sampleRate: this.sampleRate,\n        // Better compatibility for mobile and Linux\n        ...(navigator.userAgent.includes('Mobile') && {\n          latencyHint: 'balanced',\n          sampleRate: 22050\n        })\n      });\n\n      this.isInitialized = true;\n\n      // Audio context starts suspended (normal behavior)\n      if (this.audioContext.state === 'suspended') {\n        console.log(\n          '🎵 Audio context suspended - waiting for user interaction'\n        );\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error);\n      this.isInitialized = false;\n      return false;\n    }\n  }\n\n  /**\n   * Resume audio context if suspended\n   */\n  async resumeAudioContext() {\n    try {\n      if (!this.audioContext || !this.isInitialized) {\n        console.warn('Audio context not available');\n        return false;\n      }\n\n      // Check if we're in a browser environment that allows audio context resume\n      if (typeof this.audioContext.resume !== 'function') {\n        console.warn('Audio context resume not supported');\n        return false;\n      }\n\n      // Only resume if suspended\n      if (this.audioContext.state === 'suspended') {\n        try {\n          await this.audioContext.resume();\n          console.log('🎵 Audio context resumed successfully');\n          return true;\n        } catch (resumeError) {\n          console.error('Failed to resume audio context:', resumeError);\n          return false;\n        }\n      } else if (this.audioContext.state === 'running') {\n        // Already running\n        return true;\n      } else if (this.audioContext.state === 'closed') {\n        console.warn('Audio context is closed');\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to resume audio context:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check audio context health\n   */\n  checkAudioContextHealth() {\n    if (!this.audioContext || !this.isInitialized) {\n      return {\n        healthy: false,\n        state: 'not-initialized',\n        message: 'Audio context not initialized'\n      };\n    }\n\n    switch (this.audioContext.state) {\n      case 'running':\n        return {\n          healthy: true,\n          state: 'running',\n          message: 'Audio context running normally'\n        };\n      case 'suspended':\n        return {\n          healthy: false,\n          state: 'suspended',\n          message: 'Audio context suspended - needs user interaction'\n        };\n      case 'closed':\n        return {\n          healthy: false,\n          state: 'closed',\n          message: 'Audio context closed - cannot recover'\n        };\n      default:\n        return {\n          healthy: false,\n          state: 'unknown',\n          message: 'Unknown audio context state'\n        };\n    }\n  }\n\n  /**\n   * Attempt to restore a closed audio context or resume a suspended one\n   */\n  async restoreAudioContext() {\n    try {\n      if (!this.audioContext || !this.isInitialized) {\n        return await this.initialize();\n      }\n\n      if (this.audioContext.state === 'closed') {\n        // Create new audio context if the old one is closed\n        console.log('Creating new audio context - old one was closed');\n        return await this.initialize();\n      } else if (this.audioContext.state === 'suspended') {\n        return await this.resumeAudioContext();\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to restore audio context:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a buffer source for audio playback\n   */\n  createBufferSource() {\n    if (!this.audioContext || !this.isInitialized) {\n      throw new Error('Audio context not available');\n    }\n\n    const source = this.audioContext.createBufferSource();\n\n    // Track this source for cleanup\n    const sourceId = Date.now() + Math.random();\n    this.audioSources.set(sourceId, source);\n\n    // Clean up when source finishes\n    source.onended = () => {\n      this.audioSources.delete(sourceId);\n    };\n\n    return { source, sourceId };\n  }\n\n  /**\n   * Get the audio destination node\n   */\n  getDestination() {\n    if (!this.audioContext || !this.isInitialized) {\n      throw new Error('Audio context not available');\n    }\n    return this.audioContext.destination;\n  }\n\n  /**\n   * Get current audio context state\n   */\n  getState() {\n    if (!this.audioContext || !this.isInitialized) {\n      return 'not-initialized';\n    }\n    return this.audioContext.state;\n  }\n\n  /**\n   * Check if audio context is running\n   */\n  isRunning() {\n    return this.getState() === 'running';\n  }\n\n  /**\n   * Check if audio context is suspended\n   */\n  isSuspended() {\n    return this.getState() === 'suspended';\n  }\n\n  /**\n   * Check if audio context is closed\n   */\n  isClosed() {\n    return this.getState() === 'closed';\n  }\n\n  /**\n   * Create a gain node for volume control\n   */\n  createGainNode() {\n    if (!this.audioContext || !this.isInitialized) {\n      throw new Error('Audio context not available');\n    }\n    return this.audioContext.createGain();\n  }\n\n  /**\n   * Decode audio data from array buffer\n   */\n  async decodeAudioData(arrayBuffer) {\n    if (!this.audioContext || !this.isInitialized) {\n      throw new Error('Audio context not available');\n    }\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Create an audio buffer for synthesized sounds\n   */\n  createAudioBuffer(numberOfChannels, length, sampleRate) {\n    if (!this.audioContext || !this.isInitialized) {\n      throw new Error('Audio context not available');\n    }\n    return this.audioContext.createBuffer(numberOfChannels, length, sampleRate);\n  }\n\n  /**\n   * Stop all active audio sources\n   */\n  stopAllSources() {\n    this.audioSources.forEach((source, id) => {\n      try {\n        if (source.state === 'playing') {\n          source.stop();\n        }\n      } catch (error) {\n        console.warn(`Failed to stop audio source ${id}:`, error);\n      }\n    });\n    this.audioSources.clear();\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    try {\n      this.stopAllSources();\n\n      if (this.audioContext && this.audioContext.state !== 'closed') {\n        this.audioContext.close();\n      }\n\n      this.audioContext = null;\n      this.isInitialized = false;\n    } catch (error) {\n      console.error('Error during AudioManager cleanup:', error);\n    }\n  }\n\n  /**\n   * Get audio context info for debugging\n   */\n  getInfo() {\n    if (!this.audioContext || !this.isInitialized) {\n      return { initialized: false };\n    }\n\n    return {\n      initialized: true,\n      state: this.audioContext.state,\n      sampleRate: this.audioContext.sampleRate,\n      activeSourceCount: this.audioSources.size,\n      latencyHint: this.latencyHint\n    };\n  }\n}\n","// Drum Machine Application Constants\n// Centralized configuration for all magic numbers, strings, and settings\n\n// Audio Configuration\nexport const AUDIO_CONFIG = {\n  DEFAULT_SAMPLE_RATE: 44100,\n  MOBILE_SAMPLE_RATE: 22050,\n  LATENCY_HINT: 'interactive',\n  MOBILE_LATENCY_HINT: 'balanced'\n};\n\n// Tempo Configuration\nexport const TEMPO_CONFIG = {\n  DEFAULT: 120,\n  MIN: 60,\n  MAX: 200,\n  STEP: 1\n};\n\n// Pattern Configuration\nexport const PATTERN_CONFIG = {\n  DEFAULT_LENGTH: 16,\n  OPTIONS: [4, 8, 16, 32],\n  MIN_LENGTH: 4,\n  MAX_LENGTH: 32\n};\n\n// Drum Types\nexport const DRUM_TYPES = [\n  'kick',\n  'snare',\n  'hihat',\n  'crash',\n  'tom1',\n  'tom2',\n  'ride',\n  'clap',\n  'bass'\n];\n\n// Piano Configuration\nexport const PIANO_CONFIG = {\n  TOTAL_KEYS: 24,\n  WHITE_KEYS: 14,\n  BLACK_KEYS: 10,\n  DEFAULT_VELOCITY: 0.8,\n  SAMPLE_RETRY_ATTEMPTS: 3,\n  SAMPLE_RETRY_DELAY: 1000\n};\n\n// Piano Key Mapping (note names and keyboard keys)\nexport const PIANO_KEYS = [\n  { note: 'C', key: 'Q', type: 'white', index: 1, frequency: 261.63 },\n  { note: 'C#', key: 'A', type: 'black', index: 2, frequency: 277.18 },\n  { note: 'D', key: 'W', type: 'white', index: 3, frequency: 293.66 },\n  { note: 'D#', key: 'S', type: 'black', index: 4, frequency: 311.13 },\n  { note: 'E', key: 'E', type: 'white', index: 5, frequency: 329.63 },\n  { note: 'F', key: 'R', type: 'white', index: 6, frequency: 349.23 },\n  { note: 'F#', key: 'F', type: 'black', index: 7, frequency: 369.99 },\n  { note: 'G', key: 'T', type: 'white', index: 8, frequency: 392.0 },\n  { note: 'G#', key: 'G', type: 'black', index: 9, frequency: 415.3 },\n  { note: 'A', key: 'Y', type: 'white', index: 10, frequency: 440.0 },\n  { note: 'A#', key: 'H', type: 'black', index: 11, frequency: 466.16 },\n  { note: 'B', key: 'U', type: 'white', index: 12, frequency: 493.88 },\n  { note: 'C', key: 'I', type: 'white', index: 13, frequency: 523.25 },\n  { note: 'C#', key: 'J', type: 'black', index: 14, frequency: 554.37 },\n  { note: 'D', key: 'O', type: 'white', index: 15, frequency: 587.33 },\n  { note: 'D#', key: 'K', type: 'black', index: 16, frequency: 622.25 },\n  { note: 'E', key: 'P', type: 'white', index: 17, frequency: 659.25 },\n  { note: 'F', key: 'Z', type: 'white', index: 18, frequency: 698.46 },\n  { note: 'F#', key: 'X', type: 'black', index: 19, frequency: 739.99 },\n  { note: 'G', key: 'C', type: 'white', index: 20, frequency: 783.99 },\n  { note: 'G#', key: 'V', type: 'black', index: 21, frequency: 830.61 },\n  { note: 'A', key: 'B', type: 'white', index: 22, frequency: 880.0 },\n  { note: 'A#', key: 'N', type: 'black', index: 23, frequency: 932.33 },\n  { note: 'B', key: 'M', type: 'white', index: 24, frequency: 987.77 }\n];\n\n// Responsive Design\nexport const RESPONSIVE_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  DESKTOP_BREAKPOINT: 1200\n};\n\n// Storage Keys\nexport const STORAGE_KEYS = {\n  BEATS: 'drumMachineBeats',\n  THEME: 'drumMachineTheme',\n  MUTE_STATE: 'drumMachineMuteState',\n  LAST_USED_BEAT: 'drumMachineLastUsedBeat'\n};\n\n// Theme Configuration\nexport const THEME_CONFIG = {\n  LIGHT: 'light',\n  DARK: 'dark',\n  SYSTEM: 'system'\n};\n\n// UI Configuration\nexport const UI_CONFIG = {\n  ANIMATION_DURATION: 200,\n  MODAL_BACKDROP_OPACITY: 0.5,\n  TOOLTIP_DELAY: 500,\n  DEBOUNCE_DELAY: 300\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  AUDIO_CONTEXT_FAILED: 'Failed to initialize audio context',\n  SAMPLE_LOAD_FAILED: 'Failed to load audio sample',\n  STORAGE_FAILED: 'Failed to save to local storage',\n  INVALID_BEAT_DATA: 'Invalid beat data structure',\n  BEAT_NAME_EMPTY: 'Beat name cannot be empty',\n  BEAT_NAME_CONFLICT: 'Beat name already exists',\n  INITIALIZATION_FAILED: 'Failed to initialize application',\n  INVALID_URL_DATA: 'Invalid beat data in URL',\n  LOAD_FAILED: 'Failed to load beat',\n  SAVE_FAILED: 'Failed to save beat',\n  SHARE_FAILED: 'Failed to share beat',\n  COPY_FAILED: 'Failed to copy to clipboard',\n  MODAL_FAILED: 'Failed to show modal',\n  PLAYBACK_FAILED: 'Failed to start playback'\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  BEAT_SAVED: 'Beat saved successfully',\n  BEAT_LOADED: 'Beat loaded successfully',\n  BEAT_DELETED: 'Beat deleted successfully',\n  SHARE_LINK_COPIED: 'Share link copied to clipboard',\n  THEME_CHANGED: 'Theme changed successfully',\n  BEAT_LOADED_FROM_URL: 'Beat loaded from shared link',\n  LINK_COPIED: 'Link copied to clipboard'\n};\n\n// Status Messages\nexport const STATUS_MESSAGES = {\n  LOADING_SAMPLES: '🎵 Loading audio samples...',\n  LOADING_PIANO: '🎹 Loading piano samples...',\n  AUDIO_SUSPENDED: '🎵 Audio suspended - click to resume',\n  AUDIO_RUNNING: '🎵 Audio running normally',\n  AUDIO_CLOSED: '🎵 Audio context closed - cannot recover'\n};\n\n// Default Beat Structure\nexport const DEFAULT_BEAT = {\n  tempo: TEMPO_CONFIG.DEFAULT,\n  patternLength: PATTERN_CONFIG.DEFAULT_LENGTH,\n  sequencer: {}\n};\n\n// Initialize default sequencer with all drum types\nDRUM_TYPES.forEach((drumType) => {\n  DEFAULT_BEAT.sequencer[drumType] = new Array(\n    PATTERN_CONFIG.DEFAULT_LENGTH\n  ).fill(false);\n});\n\n// Export default beat as a function to avoid mutation\nexport const createDefaultBeat = () => JSON.parse(JSON.stringify(DEFAULT_BEAT));\n\n// Validation Rules\nexport const VALIDATION_RULES = {\n  TEMPO: {\n    min: TEMPO_CONFIG.MIN,\n    max: TEMPO_CONFIG.MAX,\n    type: 'number'\n  },\n  PATTERN_LENGTH: {\n    min: PATTERN_CONFIG.MIN_LENGTH,\n    max: PATTERN_CONFIG.MAX_LENGTH,\n    type: 'number',\n    allowed: PATTERN_CONFIG.OPTIONS\n  },\n  BEAT_NAME: {\n    minLength: 1,\n    maxLength: 50,\n    type: 'string'\n  }\n};\n\n// Audio Sample Paths\nexport const SAMPLE_PATHS = {\n  DRUMS: 'sounds/',\n  PIANO: 'sounds/piano/',\n  PIANO_SAMPLE_PREFIX: 'key',\n  PIANO_SAMPLE_EXTENSION: '.mp3'\n};\n\n// Piano Layout Configuration\nexport const PIANO_LAYOUT = {\n  DESKTOP: {\n    WHITE_KEY_WIDTH: 50,\n    WHITE_KEY_HEIGHT: 200,\n    BLACK_KEY_WIDTH: 30,\n    BLACK_KEY_HEIGHT: 120,\n    BLACK_KEY_OFFSET: 45\n  },\n  MOBILE: {\n    WHITE_KEY_WIDTH: '100%',\n    WHITE_KEY_HEIGHT: '40px',\n    BLACK_KEY_WIDTH: '50%',\n    BLACK_KEY_HEIGHT: '30px',\n    BLACK_KEY_OFFSET: 35\n  }\n};\n\n// Export all constants as a single object for easy access\nexport const CONSTANTS = {\n  AUDIO_CONFIG,\n  TEMPO_CONFIG,\n  PATTERN_CONFIG,\n  DRUM_TYPES,\n  PIANO_CONFIG,\n  PIANO_KEYS,\n  RESPONSIVE_CONFIG,\n  STORAGE_KEYS,\n  THEME_CONFIG,\n  UI_CONFIG,\n  ERROR_MESSAGES,\n  SUCCESS_MESSAGES,\n  STATUS_MESSAGES,\n  VALIDATION_RULES,\n  SAMPLE_PATHS,\n  PIANO_LAYOUT\n};\n\nexport default CONSTANTS;\n","import {\n  STORAGE_KEYS,\n  VALIDATION_RULES,\n  createDefaultBeat,\n  ERROR_MESSAGES,\n  SUCCESS_MESSAGES\n} from '../config/constants.js';\n\n/**\n * BeatStorage Class\n * Handles all local storage operations for beats\n * Manages beat persistence, validation, and conflict resolution\n */\nexport class BeatStorage {\n  constructor() {\n    this.storageKey = STORAGE_KEYS.BEATS;\n    this.beats = this.loadAllBeats();\n  }\n\n  /**\n   * Save a beat with validation and conflict resolution\n   * @param {string} name - Beat name\n   * @param {Object} data - Beat data\n   * @param {boolean} overwrite - Whether to overwrite existing beat\n   * @returns {Object} Result object with success status and message\n   */\n  saveBeat(name, data, overwrite = false) {\n    try {\n      // Validate inputs\n      const nameValidation = this.validateBeatName(name);\n      if (!nameValidation.valid) {\n        return { success: false, message: nameValidation.message };\n      }\n\n      const dataValidation = this.validateBeatData(data);\n      if (!dataValidation.valid) {\n        return { success: false, message: dataValidation.message };\n      }\n\n      // Check for name conflicts\n      const existingBeat = this.getBeatByName(name);\n      if (existingBeat && !overwrite) {\n        return {\n          success: false,\n          message: ERROR_MESSAGES.BEAT_NAME_CONFLICT,\n          conflict: true,\n          existingBeat\n        };\n      }\n\n      // Prepare beat object\n      const beat = {\n        name: name.trim(),\n        data: { ...data },\n        timestamp: Date.now(),\n        lastUsed: Date.now()\n      };\n\n      // Update or add beat\n      if (existingBeat) {\n        const index = this.beats.findIndex((b) => b.name === name);\n        this.beats[index] = beat;\n      } else {\n        this.beats.push(beat);\n      }\n\n      // Save to localStorage\n      this.persistBeats();\n\n      return {\n        success: true,\n        message: SUCCESS_MESSAGES.BEAT_SAVED,\n        beat\n      };\n    } catch (error) {\n      console.error('Error saving beat:', error);\n      return {\n        success: false,\n        message: ERROR_MESSAGES.STORAGE_FAILED\n      };\n    }\n  }\n\n  /**\n   * Load a specific beat by name\n   * @param {string} name - Beat name\n   * @returns {Object|null} Beat object or null if not found\n   */\n  loadBeat(name) {\n    try {\n      const beat = this.getBeatByName(name);\n      if (beat) {\n        // Update last used timestamp\n        beat.lastUsed = Date.now();\n        this.persistBeats();\n        return beat;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error loading beat:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Load all saved beats\n   * @returns {Array} Array of all saved beats\n   */\n  loadAllBeats() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (!stored) return [];\n\n      const beats = JSON.parse(stored);\n\n      // Validate stored data structure\n      if (!Array.isArray(beats)) {\n        console.warn('Invalid beats data structure, clearing corrupted data');\n        this.clearAllBeats();\n        return [];\n      }\n\n      // Filter out corrupted entries\n      const validBeats = beats.filter((beat) =>\n        this.isValidBeatStructure(beat)\n      );\n\n      // If we lost data due to corruption, save the cleaned version\n      if (validBeats.length !== beats.length) {\n        this.beats = validBeats;\n        this.persistBeats();\n      }\n\n      return validBeats;\n    } catch (error) {\n      console.error('Error loading beats from localStorage:', error);\n      // Clean up corrupted data\n      this.clearAllBeats();\n      return [];\n    }\n  }\n\n  /**\n   * Delete a beat by name\n   * @param {string} name - Beat name\n   * @returns {Object} Result object with success status and message\n   */\n  deleteBeat(name) {\n    try {\n      const initialCount = this.beats.length;\n      this.beats = this.beats.filter((beat) => beat.name !== name);\n\n      if (this.beats.length === initialCount) {\n        return {\n          success: false,\n          message: `Beat \"${name}\" not found`\n        };\n      }\n\n      this.persistBeats();\n      return {\n        success: true,\n        message: SUCCESS_MESSAGES.BEAT_DELETED\n      };\n    } catch (error) {\n      console.error('Error deleting beat:', error);\n      return {\n        success: false,\n        message: ERROR_MESSAGES.STORAGE_FAILED\n      };\n    }\n  }\n\n  /**\n   * Get the most recently used beat\n   * @returns {Object|null} Most recently used beat or null if none exist\n   */\n  getLastUsedBeat() {\n    if (this.beats.length === 0) return null;\n\n    return this.beats.reduce((latest, current) =>\n      current.lastUsed > latest.lastUsed ? current : latest\n    );\n  }\n\n  /**\n   * Get a beat by name\n   * @param {string} name - Beat name\n   * @returns {Object|null} Beat object or null if not found\n   */\n  getBeatByName(name) {\n    return this.beats.find((beat) => beat.name === name) || null;\n  }\n\n  /**\n   * Check if a beat name exists\n   * @param {string} name - Beat name to check\n   * @returns {boolean} True if name exists\n   */\n  beatNameExists(name) {\n    return this.beats.some((beat) => beat.name === name);\n  }\n\n  /**\n   * Get all beat names\n   * @returns {Array} Array of beat names\n   */\n  getAllBeatNames() {\n    return this.beats.map((beat) => beat.name);\n  }\n\n  /**\n   * Get beat count\n   * @returns {number} Number of saved beats\n   */\n  getBeatCount() {\n    return this.beats.length;\n  }\n\n  /**\n   * Clear all beats\n   * @returns {Object} Result object with success status and message\n   */\n  clearAllBeats() {\n    try {\n      this.beats = [];\n      this.persistBeats();\n      return {\n        success: true,\n        message: 'All beats cleared successfully'\n      };\n    } catch (error) {\n      console.error('Error clearing beats:', error);\n      return {\n        success: false,\n        message: ERROR_MESSAGES.STORAGE_FAILED\n      };\n    }\n  }\n\n  /**\n   * Handle beat name conflicts by suggesting alternatives\n   * @param {string} baseName - Original name\n   * @returns {string} Suggested unique name\n   */\n  handleNameConflict(baseName) {\n    let counter = 1;\n    let suggestedName = baseName;\n\n    while (this.beatNameExists(suggestedName)) {\n      suggestedName = `${baseName} (${counter})`;\n      counter++;\n    }\n\n    return suggestedName;\n  }\n\n  /**\n   * Validate beat name\n   * @param {string} name - Beat name to validate\n   * @returns {Object} Validation result with valid flag and message\n   */\n  validateBeatName(name) {\n    if (!name || typeof name !== 'string') {\n      return {\n        valid: false,\n        message: ERROR_MESSAGES.BEAT_NAME_EMPTY\n      };\n    }\n\n    const trimmedName = name.trim();\n    if (trimmedName.length === 0) {\n      return {\n        valid: false,\n        message: ERROR_MESSAGES.BEAT_NAME_EMPTY\n      };\n    }\n\n    if (trimmedName.length > VALIDATION_RULES.BEAT_NAME.maxLength) {\n      return {\n        valid: false,\n        message: `Beat name too long (max ${VALIDATION_RULES.BEAT_NAME.maxLength} characters)`\n      };\n    }\n\n    return { valid: true, message: '' };\n  }\n\n  /**\n   * Validate beat data structure\n   * @param {Object} data - Beat data to validate\n   * @returns {Object} Validation result with valid flag and message\n   */\n  validateBeatData(data) {\n    if (!data || typeof data !== 'object') {\n      return {\n        valid: false,\n        message: ERROR_MESSAGES.INVALID_BEAT_DATA\n      };\n    }\n\n    // Validate tempo\n    if (\n      typeof data.tempo !== 'number' ||\n      data.tempo < VALIDATION_RULES.TEMPO.min ||\n      data.tempo > VALIDATION_RULES.TEMPO.max\n    ) {\n      return {\n        valid: false,\n        message: `Tempo must be between ${VALIDATION_RULES.TEMPO.min} and ${VALIDATION_RULES.TEMPO.max}`\n      };\n    }\n\n    // Validate pattern length\n    if (\n      typeof data.patternLength !== 'number' ||\n      !VALIDATION_RULES.PATTERN_LENGTH.allowed.includes(data.patternLength)\n    ) {\n      return {\n        valid: false,\n        message: `Pattern length must be one of: ${VALIDATION_RULES.PATTERN_LENGTH.allowed.join(', ')}`\n      };\n    }\n\n    // Validate sequencer\n    if (!data.sequencer || typeof data.sequencer !== 'object') {\n      return {\n        valid: false,\n        message: 'Sequencer data is required'\n      };\n    }\n\n    return { valid: true, message: '' };\n  }\n\n  /**\n   * Check if a beat has valid structure\n   * @param {Object} beat - Beat object to check\n   * @returns {boolean} True if beat has valid structure\n   */\n  isValidBeatStructure(beat) {\n    if (!beat || typeof beat !== 'object') return false;\n    if (!beat.name || typeof beat.name !== 'string') return false;\n    if (!beat.data || typeof beat.data !== 'object') return false;\n    if (typeof beat.timestamp !== 'number') return false;\n    if (typeof beat.lastUsed !== 'number') return false;\n\n    return this.validateBeatData(beat.data).valid;\n  }\n\n  /**\n   * Clean up corrupted data\n   * @returns {number} Number of corrupted entries removed\n   */\n  cleanupCorruptedData() {\n    const initialCount = this.beats.length;\n    this.beats = this.beats.filter((beat) => this.isValidBeatStructure(beat));\n    const removedCount = initialCount - this.beats.length;\n\n    if (removedCount > 0) {\n      this.persistBeats();\n    }\n\n    return removedCount;\n  }\n\n  /**\n   * Export all beats as JSON string\n   * @returns {string} JSON string of all beats\n   */\n  exportBeats() {\n    try {\n      return JSON.stringify(this.beats, null, 2);\n    } catch (error) {\n      console.error('Error exporting beats:', error);\n      return '[]';\n    }\n  }\n\n  /**\n   * Import beats from JSON string\n   * @param {string} jsonString - JSON string of beats\n   * @returns {Object} Result object with success status and imported count\n   */\n  importBeats(jsonString) {\n    try {\n      const importedBeats = JSON.parse(jsonString);\n\n      if (!Array.isArray(importedBeats)) {\n        return {\n          success: false,\n          message: 'Invalid import format - expected array of beats'\n        };\n      }\n\n      // Validate each imported beat\n      const validBeats = importedBeats.filter((beat) =>\n        this.isValidBeatStructure(beat)\n      );\n      const invalidCount = importedBeats.length - validBeats.length;\n\n      if (validBeats.length === 0) {\n        return {\n          success: false,\n          message: 'No valid beats found in import data'\n        };\n      }\n\n      // Add imported beats (handle conflicts by appending timestamp)\n      let addedCount = 0;\n      validBeats.forEach((beat) => {\n        const originalName = beat.name;\n        while (this.beatNameExists(beat.name)) {\n          beat.name = `${originalName}_${Date.now()}`;\n        }\n\n        beat.timestamp = Date.now();\n        beat.lastUsed = Date.now();\n        this.beats.push(beat);\n        addedCount++;\n      });\n\n      this.persistBeats();\n\n      return {\n        success: true,\n        message: `Imported ${addedCount} beats successfully${invalidCount > 0 ? ` (${invalidCount} invalid entries skipped)` : ''}`,\n        importedCount: addedCount,\n        invalidCount\n      };\n    } catch (error) {\n      console.error('Error importing beats:', error);\n      return {\n        success: false,\n        message: 'Invalid JSON format'\n      };\n    }\n  }\n\n  /**\n   * Get storage statistics\n   * @returns {Object} Storage statistics\n   */\n  getStorageStats() {\n    const totalSize = new Blob([JSON.stringify(this.beats)]).size;\n    const avgBeatSize =\n      this.beats.length > 0 ? totalSize / this.beats.length : 0;\n\n    return {\n      totalBeats: this.beats.length,\n      totalSize: totalSize,\n      averageBeatSize: Math.round(avgBeatSize),\n      storageKey: this.storageKey,\n      lastUpdated:\n        this.beats.length > 0\n          ? Math.max(...this.beats.map((b) => b.timestamp))\n          : null\n    };\n  }\n\n  /**\n   * Persist beats to localStorage\n   * @private\n   */\n  persistBeats() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.beats));\n    } catch (error) {\n      console.error('Error persisting beats to localStorage:', error);\n      throw new Error(ERROR_MESSAGES.STORAGE_FAILED);\n    }\n  }\n\n  /**\n   * Refresh beats from localStorage\n   * Useful for handling external changes\n   */\n  refresh() {\n    this.beats = this.loadAllBeats();\n  }\n}\n\nexport default BeatStorage;\n","import {\n  PIANO_CONFIG,\n  PIANO_KEYS,\n  PIANO_LAYOUT,\n  RESPONSIVE_CONFIG,\n  SAMPLE_PATHS,\n  STATUS_MESSAGES,\n  ERROR_MESSAGES\n} from '../config/constants.js';\n\n/**\n * PianoManager Class\n * Handles all piano-related functionality including key creation,\n * sample loading, event handling, and responsive layout\n */\nexport class PianoManager {\n  constructor(audioManager) {\n    this.audioManager = audioManager;\n    this.pianoSamples = new Map();\n    this.isInitialized = false;\n    this.container = null;\n    this.keys = new Map();\n    this.activeTouches = new Map();\n    this.isMobile = window.innerWidth <= RESPONSIVE_CONFIG.MOBILE_BREAKPOINT;\n\n    // Bind methods to preserve context\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleTouchCancel = this.handleTouchCancel.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  /**\n   * Initialize the piano\n   * @param {HTMLElement} container - Container element for piano\n   * @returns {Promise<boolean>} Success status\n   */\n  async initialize(container) {\n    try {\n      this.container = container;\n\n      // Create piano keys\n      this.createPianoKeys();\n\n      // Bind events\n      this.bindPianoEvents();\n\n      // Load piano samples\n      await this.loadPianoSamples();\n\n      // Set up responsive handling\n      this.setupResponsiveHandling();\n\n      this.isInitialized = true;\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize piano:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create piano key elements\n   * @private\n   */\n  createPianoKeys() {\n    if (!this.container) return;\n\n    // Clear existing keys\n    this.container.innerHTML = '';\n    this.keys.clear();\n\n    // Create white keys first\n    const whiteKeys = PIANO_KEYS.filter((key) => key.type === 'white');\n    whiteKeys.forEach((keyData, index) => {\n      const keyElement = this.createKeyElement(keyData, index);\n      this.keys.set(keyData.index, keyElement);\n      this.container.appendChild(keyElement);\n    });\n\n    // Create black keys positioned between white keys\n    const blackKeys = PIANO_KEYS.filter((key) => key.type === 'black');\n    blackKeys.forEach((keyData) => {\n      const keyElement = this.createKeyElement(keyData);\n      this.positionBlackKey(keyElement, keyData);\n      this.keys.set(keyData.index, keyElement);\n      this.container.appendChild(keyElement);\n    });\n  }\n\n  /**\n   * Create individual key element\n   * @param {Object} keyData - Key data from PIANO_KEYS\n   * @param {number} whiteKeyIndex - Index for white key positioning\n   * @returns {HTMLElement} Key element\n   * @private\n   */\n  createKeyElement(keyData, whiteKeyIndex = null) {\n    const keyElement = document.createElement('div');\n    keyElement.className = `piano-key ${keyData.type}`;\n    keyElement.dataset.keyIndex = keyData.index;\n    keyElement.dataset.note = keyData.note;\n    keyElement.dataset.keyboardKey = keyData.key;\n\n    // Set key content (note name + keyboard key for desktop, just note for mobile)\n    if (this.isMobile) {\n      keyElement.innerHTML = `<span class=\"piano-key-label\">${keyData.note}</span>`;\n    } else {\n      keyElement.innerHTML = `<span class=\"piano-key-label\">${keyData.note}</span><span class=\"piano-keyboard-key\">${keyData.key}</span>`;\n    }\n\n    // Set key dimensions and positioning\n    if (keyData.type === 'white') {\n      if (this.isMobile) {\n        keyElement.style.height = PIANO_LAYOUT.MOBILE.WHITE_KEY_HEIGHT;\n        keyElement.style.width = PIANO_LAYOUT.MOBILE.WHITE_KEY_WIDTH;\n      } else {\n        keyElement.style.width = `${PIANO_LAYOUT.DESKTOP.WHITE_KEY_WIDTH}px`;\n        keyElement.style.height = `${PIANO_LAYOUT.DESKTOP.WHITE_KEY_HEIGHT}px`;\n        if (whiteKeyIndex !== null) {\n          keyElement.style.left = `${whiteKeyIndex * PIANO_LAYOUT.DESKTOP.WHITE_KEY_WIDTH}px`;\n        }\n      }\n    } else {\n      if (this.isMobile) {\n        keyElement.style.height = PIANO_LAYOUT.MOBILE.BLACK_KEY_HEIGHT;\n        keyElement.style.width = PIANO_LAYOUT.MOBILE.BLACK_KEY_WIDTH;\n      } else {\n        keyElement.style.width = `${PIANO_LAYOUT.DESKTOP.BLACK_KEY_WIDTH}px`;\n        keyElement.style.height = `${PIANO_LAYOUT.DESKTOP.BLACK_KEY_HEIGHT}px`;\n      }\n    }\n\n    return keyElement;\n  }\n\n  /**\n   * Position black key between white keys\n   * @param {HTMLElement} keyElement - Black key element\n   * @param {Object} keyData - Key data\n   * @private\n   */\n  positionBlackKey(keyElement, keyData) {\n    if (this.isMobile) {\n      // Mobile: position black keys to the right (top) of white keys\n      const whiteKeyIndex = this.getWhiteKeyIndexForBlackKey(keyData.index);\n      const whiteKeyTop =\n        whiteKeyIndex * parseInt(PIANO_LAYOUT.MOBILE.WHITE_KEY_HEIGHT);\n\n      keyElement.style.left = '35px';\n      keyElement.style.top = `${whiteKeyTop + 35}px`;\n      keyElement.style.right = '0';\n    } else {\n      // Desktop: position black keys between white keys\n      const whiteKeyIndex = this.getWhiteKeyIndexForBlackKey(keyData.index);\n      const leftPosition =\n        whiteKeyIndex * PIANO_LAYOUT.DESKTOP.WHITE_KEY_WIDTH +\n        PIANO_LAYOUT.DESKTOP.BLACK_KEY_OFFSET;\n\n      keyElement.style.left = `${leftPosition}px`;\n      keyElement.style.top = '0';\n    }\n  }\n\n  /**\n   * Get white key index for positioning black keys\n   * @param {number} blackKeyIndex - Black key index\n   * @returns {number} White key index\n   * @private\n   */\n  getWhiteKeyIndexForBlackKey(blackKeyIndex) {\n    const blackKeyMap = {\n      2: 0, // C# between C and D\n      4: 1, // D# between D and E\n      7: 3, // F# between F and G\n      9: 4, // G# between G and A\n      11: 5, // A# between A and B\n      14: 6, // C# between C and D (second octave)\n      16: 7, // D# between D and E (second octave)\n      19: 9, // F# between F and G (second octave)\n      21: 10, // G# between G and A (second octave)\n      23: 11 // A# between A and B (second octave)\n    };\n\n    return blackKeyMap[blackKeyIndex] || 0;\n  }\n\n  /**\n   * Load piano samples with retry mechanism\n   * @returns {Promise<boolean>} Success status\n   * @private\n   */\n  async loadPianoSamples() {\n    try {\n      this.updateStatus(STATUS_MESSAGES.LOADING_PIANO);\n\n      const loadPromises = PIANO_KEYS.map(async (keyData) => {\n        const samplePath = `${SAMPLE_PATHS.PIANO}${SAMPLE_PATHS.PIANO_SAMPLE_PREFIX}${keyData.index.toString().padStart(2, '0')}${SAMPLE_PATHS.PIANO_SAMPLE_EXTENSION}`;\n\n        try {\n          const audioBuffer = await this.loadPianoSampleWithRetry(samplePath);\n          this.pianoSamples.set(keyData.index, audioBuffer);\n          return true;\n        } catch (error) {\n          console.warn(\n            `Failed to load piano sample for key ${keyData.index}:`,\n            error\n          );\n          this.pianoSamples.set(keyData.index, null); // Mark as failed\n          return false;\n        }\n      });\n\n      const results = await Promise.allSettled(loadPromises);\n      const successCount = results.filter(\n        (result) => result.status === 'fulfilled' && result.value\n      ).length;\n\n      this.updateStatus(\n        `🎹 Piano samples loaded: ${successCount}/${PIANO_CONFIG.TOTAL_KEYS}`\n      );\n\n      return successCount > 0;\n    } catch (error) {\n      console.error('Error loading piano samples:', error);\n      this.updateStatus('🎹 Failed to load piano samples');\n      return false;\n    }\n  }\n\n  /**\n   * Load piano sample with retry mechanism\n   * @param {string} filePath - Path to sample file\n   * @returns {Promise<AudioBuffer>} Audio buffer\n   * @private\n   */\n  async loadPianoSampleWithRetry(filePath) {\n    let lastError;\n\n    for (\n      let attempt = 1;\n      attempt <= PIANO_CONFIG.SAMPLE_RETRY_ATTEMPTS;\n      attempt++\n    ) {\n      try {\n        return await this.loadPianoSample(filePath);\n      } catch (error) {\n        lastError = error;\n\n        if (attempt < PIANO_CONFIG.SAMPLE_RETRY_ATTEMPTS) {\n          const delay =\n            PIANO_CONFIG.SAMPLE_RETRY_DELAY * Math.pow(2, attempt - 1);\n          await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Load individual piano sample\n   * @param {string} filePath - Path to sample file\n   * @returns {Promise<AudioBuffer>} Audio buffer\n   * @private\n   */\n  async loadPianoSample(filePath) {\n    try {\n      const response = await fetch(filePath);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n      return await this.audioManager.decodeAudioData(arrayBuffer);\n    } catch (error) {\n      throw new Error(`Failed to load piano sample: ${error.message}`);\n    }\n  }\n\n  /**\n   * Play piano key\n   * @param {number} keyIndex - Key index to play\n   * @param {number} velocity - Velocity (0-1)\n   * @returns {boolean} Success status\n   */\n  playPianoKey(keyIndex, velocity = PIANO_CONFIG.DEFAULT_VELOCITY) {\n    try {\n      if (!this.audioManager || !this.audioManager.isInitialized) {\n        console.warn('Audio manager not ready');\n        return false;\n      }\n\n      // Try to use loaded sample first\n      const sample = this.pianoSamples.get(keyIndex);\n      if (sample) {\n        this.audioManager.playBufferSource(sample, velocity);\n        return true;\n      }\n\n      // Fallback to synthesized sound\n      const keyData = PIANO_KEYS.find((key) => key.index === keyIndex);\n      if (keyData && keyData.frequency) {\n        const synthesizedSound = this.createSynthesizedPianoSound(\n          keyData.frequency\n        );\n        this.audioManager.playBufferSource(synthesizedSound, velocity);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Error playing piano key:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create synthesized piano sound as fallback\n   * @param {number} frequency - Frequency in Hz\n   * @returns {AudioBuffer} Synthesized audio buffer\n   * @private\n   */\n  createSynthesizedPianoSound(frequency) {\n    try {\n      const sampleRate = this.audioManager.audioContext.sampleRate;\n      const duration = 0.5; // 500ms\n      const frameCount = Math.floor(sampleRate * duration);\n\n      const audioBuffer = this.audioManager.createAudioBuffer(\n        1,\n        frameCount,\n        sampleRate\n      );\n      const channelData = audioBuffer.getChannelData(0);\n\n      // Generate sine wave with exponential decay\n      for (let i = 0; i < frameCount; i++) {\n        const time = i / sampleRate;\n        const decay = Math.exp(-time * 3); // Exponential decay\n        channelData[i] = Math.sin(2 * Math.PI * frequency * time) * decay * 0.3;\n      }\n\n      return audioBuffer;\n    } catch (error) {\n      console.error('Error creating synthesized piano sound:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Bind piano events\n   * @private\n   */\n  bindPianoEvents() {\n    // Keyboard events\n    document.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('keyup', this.handleKeyUp);\n\n    // Touch events\n    document.addEventListener('touchstart', this.handleTouchStart);\n    document.addEventListener('touchend', this.handleTouchEnd);\n    document.addEventListener('touchcancel', this.handleTouchCancel);\n\n    // Mouse events for desktop\n    if (!this.isMobile) {\n      this.keys.forEach((keyElement) => {\n        keyElement.addEventListener('mousedown', () =>\n          this.handleKeyPress(keyElement)\n        );\n        keyElement.addEventListener('mouseup', () =>\n          this.handleKeyRelease(keyElement)\n        );\n        keyElement.addEventListener('mouseleave', () =>\n          this.handleKeyRelease(keyElement)\n        );\n      });\n    }\n  }\n\n  /**\n   * Handle keyboard key down\n   * @param {KeyboardEvent} event - Keyboard event\n   * @private\n   */\n  handleKeyDown(event) {\n    if (this.isMobile) return; // Skip keyboard on mobile\n\n    const keyData = PIANO_KEYS.find(\n      (key) => key.key === event.key.toUpperCase()\n    );\n    if (keyData) {\n      event.preventDefault();\n      const keyElement = this.keys.get(keyData.index);\n      if (keyElement && !keyElement.classList.contains('active')) {\n        this.handleKeyPress(keyElement);\n      }\n    }\n  }\n\n  /**\n   * Handle keyboard key up\n   * @param {KeyboardEvent} event - Keyboard event\n   * @private\n   */\n  handleKeyUp(event) {\n    if (this.isMobile) return; // Skip keyboard on mobile\n\n    const keyData = PIANO_KEYS.find(\n      (key) => key.key === event.key.toUpperCase()\n    );\n    if (keyData) {\n      event.preventDefault();\n      const keyElement = this.keys.get(keyData.index);\n      if (keyElement && keyElement.classList.contains('active')) {\n        this.handleKeyRelease(keyElement);\n      }\n    }\n  }\n\n  /**\n   * Handle touch start\n   * @param {TouchEvent} event - Touch event\n   * @private\n   */\n  handleTouchStart(event) {\n    let pianoKeyTouched = false;\n\n    event.changedTouches.forEach((touch) => {\n      const touchId = touch.identifier;\n      const element = document.elementFromPoint(touch.clientX, touch.clientY);\n      const pianoKey = element?.closest('.piano-key');\n\n      if (pianoKey) {\n        pianoKeyTouched = true;\n        this.activeTouches.set(touchId, pianoKey);\n        this.handleKeyPress(pianoKey);\n      }\n    });\n\n    // Only prevent default if we actually touched a piano key\n    if (pianoKeyTouched) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Handle touch end\n   * @param {TouchEvent} event - Touch event\n   * @private\n   */\n  handleTouchEnd(event) {\n    let pianoKeyReleased = false;\n\n    event.changedTouches.forEach((touch) => {\n      const touchId = touch.identifier;\n      const pianoKey = this.activeTouches.get(touchId);\n\n      if (pianoKey) {\n        pianoKeyReleased = true;\n        this.activeTouches.delete(touchId);\n        this.handleKeyRelease(pianoKey);\n      }\n    });\n\n    // Only prevent default if we actually released a piano key\n    if (pianoKeyReleased) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Handle touch cancel\n   * @param {TouchEvent} event - Touch event\n   * @private\n   */\n  handleTouchCancel(event) {\n    let pianoKeyCancelled = false;\n\n    event.changedTouches.forEach((touch) => {\n      const touchId = touch.identifier;\n      const pianoKey = this.activeTouches.get(touchId);\n\n      if (pianoKey) {\n        pianoKeyCancelled = true;\n        this.activeTouches.delete(touchId);\n        this.handleKeyRelease(pianoKey);\n      }\n    });\n\n    // Only prevent default if we actually cancelled a piano key\n    if (pianoKeyCancelled) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Handle key press\n   * @param {HTMLElement} keyElement - Key element\n   * @private\n   */\n  handleKeyPress(keyElement) {\n    if (!keyElement || keyElement.classList.contains('active')) return;\n\n    keyElement.classList.add('active');\n    const keyIndex = parseInt(keyElement.dataset.keyIndex);\n    this.playPianoKey(keyIndex);\n  }\n\n  /**\n   * Handle key release\n   * @param {HTMLElement} keyElement - Key element\n   * @private\n   */\n  handleKeyRelease(keyElement) {\n    if (!keyElement) return;\n\n    keyElement.classList.remove('active');\n  }\n\n  /**\n   * Setup responsive handling\n   * @private\n   */\n  setupResponsiveHandling() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize(); // Initial check\n  }\n\n  /**\n   * Handle window resize\n   * @private\n   */\n  handleResize() {\n    const wasMobile = this.isMobile;\n    this.isMobile = window.innerWidth <= RESPONSIVE_CONFIG.MOBILE_BREAKPOINT;\n\n    // Recreate keys if mobile state changed\n    if (wasMobile !== this.isMobile) {\n      this.createPianoKeys();\n      this.bindPianoEvents();\n    }\n  }\n\n  /**\n   * Update status message\n   * @param {string} message - Status message\n   * @private\n   */\n  updateStatus(message) {\n    // This would typically update a status display element\n    // For now, just log to console\n    console.log(message);\n  }\n\n  /**\n   * Get piano state\n   * @returns {Object} Piano state\n   */\n  getState() {\n    return {\n      isInitialized: this.isInitialized,\n      isMobile: this.isMobile,\n      totalKeys: PIANO_CONFIG.TOTAL_KEYS,\n      loadedSamples: this.pianoSamples.size,\n      activeTouches: this.activeTouches.size\n    };\n  }\n\n  /**\n   * Destroy piano manager\n   */\n  destroy() {\n    try {\n      // Remove event listeners\n      document.removeEventListener('keydown', this.handleKeyDown);\n      document.removeEventListener('keyup', this.handleKeyUp);\n      document.removeEventListener('touchstart', this.handleTouchStart);\n      document.removeEventListener('touchend', this.handleTouchEnd);\n      document.removeEventListener('touchcancel', this.handleTouchCancel);\n      window.removeEventListener('resize', this.handleResize);\n\n      // Clear references\n      this.keys.clear();\n      this.activeTouches.clear();\n      this.pianoSamples.clear();\n      this.container = null;\n      this.audioManager = null;\n      this.isInitialized = false;\n    } catch (error) {\n      console.error('Error destroying piano manager:', error);\n    }\n  }\n}\n\nexport default PianoManager;\n","import {\r\n  PATTERN_CONFIG,\r\n  DRUM_TYPES,\r\n  VALIDATION_RULES,\r\n  createDefaultBeat\r\n} from '../config/constants.js';\r\n\r\n/**\r\n * SequencerManager Class\r\n * Handles all sequencer grid functionality including grid creation,\r\n * step management, and data serialization/deserialization\r\n */\r\nexport class SequencerManager {\r\n  constructor(container, options = {}) {\r\n    this.container = container;\r\n    this.options = {\r\n      patternLength: options.patternLength || PATTERN_CONFIG.DEFAULT_LENGTH,\r\n      drumTypes: options.drumTypes || [...DRUM_TYPES],\r\n      cellSize: options.cellSize || 40,\r\n      cellGap: options.cellGap || 2,\r\n      ...options\r\n    };\r\n\r\n    this.grid = new Map(); // Map<drumType, Map<stepIndex, boolean>>\r\n    this.isPlaying = false;\r\n    this.currentStep = 0;\r\n    this.animationFrame = null;\r\n\r\n    // Initialize grid data\r\n    this.initializeGrid();\r\n\r\n    // Bind methods to preserve context\r\n    this.handleCellClick = this.handleCellClick.bind(this);\r\n    this.handleCellHover = this.handleCellHover.bind(this);\r\n    this.updateGridDisplay = this.updateGridDisplay.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize the sequencer grid\r\n   * @private\r\n   */\r\n  initializeGrid() {\r\n    this.grid.clear();\r\n\r\n    this.options.drumTypes.forEach((drumType) => {\r\n      const stepMap = new Map();\r\n      for (let step = 0; step < this.options.patternLength; step++) {\r\n        stepMap.set(step, false);\r\n      }\r\n      this.grid.set(drumType, stepMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create the sequencer grid DOM structure\r\n   * @returns {boolean} Success status\r\n   */\r\n  createGrid() {\r\n    try {\r\n      if (!this.container) {\r\n        console.error('Container element not provided');\r\n        return false;\r\n      }\r\n\r\n      // Clear existing grid\r\n      this.container.innerHTML = '';\r\n\r\n      // Create grid rows (matching old structure)\r\n      this.options.drumTypes.forEach((drumType, rowIndex) => {\r\n        const row = document.createElement('div');\r\n        row.className = 'grid-row';\r\n        row.style.gridTemplateColumns = `repeat(${this.options.patternLength}, 1fr)`;\r\n\r\n        // Create grid cells\r\n        for (let step = 0; step < this.options.patternLength; step++) {\r\n          const cell = document.createElement('div');\r\n          cell.className = 'grid-cell';\r\n          cell.dataset.row = rowIndex;\r\n          cell.dataset.step = step;\r\n          cell.dataset.drum = drumType;\r\n\r\n          // Add click event\r\n          cell.addEventListener('click', () => this.handleCellClick(cell, drumType, step));\r\n\r\n          row.appendChild(cell);\r\n        }\r\n\r\n        this.container.appendChild(row);\r\n      });\r\n\r\n      // Bind events\r\n      this.bindGridEvents();\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error creating sequencer grid:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Bind grid events\r\n   * @private\r\n   */\r\n  bindGridEvents() {\r\n    // Additional event bindings can be added here\r\n    // Most events are bound during cell creation\r\n  }\r\n\r\n  /**\r\n   * Handle cell click\r\n   * @param {HTMLElement} cell - Grid cell element\r\n   * @param {string} drumType - The drum type\r\n   * @param {number} stepIndex - The step index\r\n   * @private\r\n   */\r\n  handleCellClick(cell, drumType, stepIndex) {\r\n    if (drumType && stepIndex !== undefined) {\r\n      this.toggleStep(drumType, stepIndex);\r\n      this.updateCellDisplay(cell, drumType, stepIndex);\r\n      \r\n      // Call the callback if provided\r\n      if (this.options.onStepToggle) {\r\n        this.options.onStepToggle(drumType, stepIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle cell hover\r\n   * @param {HTMLElement} cell - Grid cell element\r\n   * @param {boolean} isHovering - Whether mouse is hovering\r\n   * @private\r\n   */\r\n  handleCellHover(cell, isHovering) {\r\n    if (isHovering) {\r\n      cell.style.backgroundColor = 'var(--accent-color)';\r\n      cell.style.opacity = '0.8';\r\n    } else {\r\n      const drumType = cell.dataset.drum;\r\n      const stepIndex = parseInt(cell.dataset.step);\r\n      this.updateCellDisplay(cell, drumType, stepIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update individual cell display\r\n   * @param {HTMLElement} cell - Grid cell element\r\n   * @param {string} drumType - Drum type\r\n   * @param {number} stepIndex - Step index\r\n   * @private\r\n   */\r\n  updateCellDisplay(cell, drumType, stepIndex) {\r\n    if (!cell || !drumType || stepIndex === undefined) return;\r\n\r\n    const isActive = this.getStepState(drumType, stepIndex);\r\n\r\n    if (isActive) {\r\n      cell.style.backgroundColor = 'var(--accent-color)';\r\n      cell.style.borderColor = 'var(--accent-color-dark)';\r\n    } else {\r\n      cell.style.backgroundColor = 'var(--background-secondary)';\r\n      cell.style.borderColor = 'var(--border-color)';\r\n    }\r\n\r\n    cell.style.opacity = '1';\r\n  }\r\n\r\n  /**\r\n   * Update entire grid display\r\n   */\r\n  updateGridDisplay() {\r\n    this.options.drumTypes.forEach((drumType) => {\r\n      for (let step = 0; step < this.options.patternLength; step++) {\r\n        const cell = this.container.querySelector(\r\n          `[data-drum=\"${drumType}\"][data-step=\"${step}\"]`\r\n        );\r\n        if (cell) {\r\n          this.updateCellDisplay(cell, drumType, step);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle step state\r\n   * @param {string} drumType - Drum type\r\n   * @param {number} stepIndex - Step index\r\n   * @returns {boolean} New step state\r\n   */\r\n  toggleStep(drumType, stepIndex) {\r\n    if (!this.validateStep(drumType, stepIndex)) {\r\n      return false;\r\n    }\r\n\r\n    const stepMap = this.grid.get(drumType);\r\n    if (!stepMap) return false;\r\n\r\n    const currentState = stepMap.get(stepIndex) || false;\r\n    const newState = !currentState;\r\n\r\n    stepMap.set(stepIndex, newState);\r\n    return newState;\r\n  }\r\n\r\n  /**\r\n   * Get step state\r\n   * @param {string} drumType - Drum type\r\n   * @param {number} stepIndex - Step index\r\n   * @returns {boolean} Step state\r\n   */\r\n  getStepState(drumType, stepIndex) {\r\n    if (!this.validateStep(drumType, stepIndex)) {\r\n      return false;\r\n    }\r\n\r\n    const stepMap = this.grid.get(drumType);\r\n    return stepMap ? stepMap.get(stepIndex) || false : false;\r\n  }\r\n\r\n  /**\r\n   * Set step state\r\n   * @param {string} drumType - Drum type\r\n   * @param {number} stepIndex - Step index\r\n   * @param {boolean} state - New state\r\n   * @returns {boolean} Success status\r\n   */\r\n  setStepState(drumType, stepIndex, state) {\r\n    if (!this.validateStep(drumType, stepIndex)) {\r\n      return false;\r\n    }\r\n\r\n    const stepMap = this.grid.get(drumType);\r\n    if (!stepMap) return false;\r\n\r\n    stepMap.set(stepIndex, Boolean(state));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Validate step parameters\r\n   * @param {string} drumType - Drum type\r\n   * @param {number} stepIndex - Step index\r\n   * @returns {boolean} Validation result\r\n   * @private\r\n   */\r\n  validateStep(drumType, stepIndex) {\r\n    if (!drumType || typeof drumType !== 'string') return false;\r\n    if (\r\n      typeof stepIndex !== 'number' ||\r\n      stepIndex < 0 ||\r\n      stepIndex >= this.options.patternLength\r\n    )\r\n      return false;\r\n    if (!this.options.drumTypes.includes(drumType)) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Update grid size\r\n   * @param {number} newLength - New pattern length\r\n   * @returns {boolean} Success status\r\n   */\r\n  updateGridSize(newLength) {\r\n    if (!this.validatePatternLength(newLength)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Update options\r\n      this.options.patternLength = newLength;\r\n\r\n      // Reinitialize grid data\r\n      this.initializeGrid();\r\n\r\n      // Recreate grid DOM\r\n      this.createGrid();\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating grid size:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate pattern length\r\n   * @param {number} length - Pattern length to validate\r\n   * @returns {boolean} Validation result\r\n   * @private\r\n   */\r\n  validatePatternLength(length) {\r\n    return (\r\n      typeof length === 'number' &&\r\n      length >= VALIDATION_RULES.PATTERN_LENGTH.min &&\r\n      length <= VALIDATION_RULES.PATTERN_LENGTH.max &&\r\n      VALIDATION_RULES.PATTERN_LENGTH.allowed.includes(length)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear all steps\r\n   * @returns {boolean} Success status\r\n   */\r\n  clearGrid() {\r\n    try {\r\n      this.grid.forEach((stepMap) => {\r\n        stepMap.forEach((value, step) => {\r\n          stepMap.set(step, false);\r\n        });\r\n      });\r\n\r\n      this.updateGridDisplay();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error clearing grid:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sequencer data\r\n   * @returns {Object} Sequencer data object\r\n   */\r\n  getSequencerData() {\r\n    const data = {};\r\n\r\n    this.grid.forEach((stepMap, drumType) => {\r\n      data[drumType] = Array.from(stepMap.values());\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Set sequencer data\r\n   * @param {Object} data - Sequencer data object\r\n   * @returns {boolean} Success status\r\n   */\r\n  setSequencerData(data) {\r\n    if (!data || typeof data !== 'object') {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Clear existing data\r\n      this.initializeGrid();\r\n\r\n      // Set new data\r\n      Object.entries(data).forEach(([drumType, steps]) => {\r\n        if (this.options.drumTypes.includes(drumType) && Array.isArray(steps)) {\r\n          const stepMap = this.grid.get(drumType);\r\n          if (stepMap) {\r\n            steps.forEach((step, index) => {\r\n              if (index < this.options.patternLength) {\r\n                stepMap.set(index, Boolean(step));\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      // Update display\r\n      this.updateGridDisplay();\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error setting sequencer data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize sequencer data for storage/sharing\r\n   * @returns {Object} Optimized sequencer data\r\n   */\r\n  optimizeSequencerData() {\r\n    const optimized = {};\r\n\r\n    this.grid.forEach((stepMap, drumType) => {\r\n      const activeSteps = [];\r\n\r\n      stepMap.forEach((isActive, stepIndex) => {\r\n        if (isActive) {\r\n          activeSteps.push(stepIndex);\r\n        }\r\n      });\r\n\r\n      // Only include drum types with active steps\r\n      if (activeSteps.length > 0) {\r\n        optimized[drumType] = activeSteps;\r\n      }\r\n    });\r\n\r\n    return optimized;\r\n  }\r\n\r\n  /**\r\n   * Get sequencer statistics\r\n   * @returns {Object} Statistics object\r\n   */\r\n  getStatistics() {\r\n    const stats = {\r\n      totalSteps: this.options.patternLength,\r\n      totalDrumTypes: this.options.drumTypes.length,\r\n      activeSteps: 0,\r\n      drumTypeStats: {}\r\n    };\r\n\r\n    this.grid.forEach((stepMap, drumType) => {\r\n      let activeCount = 0;\r\n      stepMap.forEach((isActive) => {\r\n        if (isActive) activeCount++;\r\n      });\r\n\r\n      stats.activeSteps += activeCount;\r\n      stats.drumTypeStats[drumType] = {\r\n        active: activeCount,\r\n        total: this.options.patternLength,\r\n        percentage: Math.round((activeCount / this.options.patternLength) * 100)\r\n      };\r\n    });\r\n\r\n    stats.totalActivePercentage = Math.round(\r\n      (stats.activeSteps /\r\n        (this.options.patternLength * this.options.drumTypes.length)) *\r\n        100\r\n    );\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Start playback visualization\r\n   * @param {number} bpm - Beats per minute\r\n   */\r\n  startPlayback(bpm) {\r\n    if (this.isPlaying) return;\r\n\r\n    this.isPlaying = true;\r\n    this.currentStep = 0;\r\n\r\n    const stepDuration = 60 / bpm / 4; // 16th note duration\r\n    let lastStepTime = 0;\r\n\r\n    const animate = (currentTime) => {\r\n      if (!this.isPlaying) return;\r\n\r\n      const elapsed = (currentTime - lastStepTime) / 1000;\r\n\r\n      if (elapsed >= stepDuration) {\r\n        this.highlightCurrentStep(this.currentStep);\r\n        this.currentStep = (this.currentStep + 1) % this.options.patternLength;\r\n        lastStepTime = currentTime;\r\n      }\r\n\r\n      this.animationFrame = requestAnimationFrame(animate);\r\n    };\r\n\r\n    this.animationFrame = requestAnimationFrame(animate);\r\n  }\r\n\r\n  /**\r\n   * Stop playback visualization\r\n   */\r\n  stopPlayback() {\r\n    this.isPlaying = false;\r\n    this.currentStep = 0;\r\n\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n      this.animationFrame = null;\r\n    }\r\n\r\n    // Remove all step highlighting\r\n    this.clearStepHighlighting();\r\n  }\r\n\r\n  /**\r\n   * Highlight current step\r\n   * @param {number} stepIndex - Step index to highlight\r\n   * @private\r\n   */\r\n  highlightCurrentStep(stepIndex) {\r\n    // Remove previous highlighting\r\n    this.clearStepHighlighting();\r\n\r\n    // Add current step highlighting\r\n    this.options.drumTypes.forEach((drumType) => {\r\n      const cell = this.container.querySelector(\r\n        `[data-drum=\"${drumType}\"][data-step=\"${stepIndex}\"]`\r\n      );\r\n      if (cell) {\r\n        cell.style.boxShadow = '0 0 10px var(--accent-color)';\r\n        cell.style.transform = 'scale(1.1)';\r\n        cell.style.transition = 'all 0.1s ease';\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear step highlighting\r\n   * @private\r\n   */\r\n  clearStepHighlighting() {\r\n    const cells = this.container.querySelectorAll('.grid-cell');\r\n    cells.forEach((cell) => {\r\n      cell.style.boxShadow = 'none';\r\n      cell.style.transform = 'scale(1)';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get sequencer state\r\n   * @returns {Object} State object\r\n   */\r\n  getState() {\r\n    return {\r\n      isPlaying: this.isPlaying,\r\n      currentStep: this.currentStep,\r\n      patternLength: this.options.patternLength,\r\n      drumTypes: this.options.drumTypes,\r\n      gridData: this.getSequencerData(),\r\n      statistics: this.getStatistics()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy sequencer manager\r\n   */\r\n  destroy() {\r\n    try {\r\n      // Stop playback\r\n      this.stopPlayback();\r\n\r\n      // Clear container\r\n      if (this.container) {\r\n        this.container.innerHTML = '';\r\n      }\r\n\r\n      // Clear data\r\n      this.grid.clear();\r\n\r\n      // Clear references\r\n      this.container = null;\r\n    } catch (error) {\r\n      console.error('Error destroying sequencer manager:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default SequencerManager;\r\n","import {\r\n  UI_CONFIG,\r\n  ERROR_MESSAGES,\r\n  SUCCESS_MESSAGES,\r\n  VALIDATION_RULES\r\n} from '../config/constants.js';\r\n\r\n/**\r\n * ModalManager Class\r\n * Handles all modal functionality including beat selection, save dialogs,\r\n * modal state management, and event handling\r\n */\r\nexport class ModalManager {\r\n  constructor() {\r\n    this.modals = new Map();\r\n    this.activeModal = null;\r\n    this.modalBackdrop = null;\r\n    this.isInitialized = false;\r\n\r\n    // Modal templates\r\n    this.templates = {\r\n      beatSelection: this.createBeatSelectionTemplate(),\r\n      saveBeat: this.createSaveBeatTemplate()\r\n    };\r\n\r\n    // Bind methods to preserve context\r\n    this.handleModalClose = this.handleModalClose.bind(this);\r\n    this.handleBackdropClick = this.handleBackdropClick.bind(this);\r\n    this.handleEscapeKey = this.handleEscapeKey.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n\r\n    // Initialize modal system\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Initialize modal system\r\n   * @returns {boolean} Success status\r\n   */\r\n  initialize() {\r\n    try {\r\n      // Create modal backdrop\r\n      this.createModalBackdrop();\r\n\r\n      // Bind global events\r\n      this.bindGlobalEvents();\r\n\r\n      this.isInitialized = true;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error initializing modal manager:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create modal backdrop\r\n   * @private\r\n   */\r\n  createModalBackdrop() {\r\n    this.modalBackdrop = document.createElement('div');\r\n    this.modalBackdrop.className = 'modal-backdrop';\r\n    this.modalBackdrop.style.cssText = `\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: rgba(0, 0, 0, ${UI_CONFIG.MODAL_BACKDROP_OPACITY});\r\n      z-index: 9998;\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transition: opacity ${UI_CONFIG.ANIMATION_DURATION}ms ease, visibility ${UI_CONFIG.ANIMATION_DURATION}ms ease;\r\n    `;\r\n\r\n    this.modalBackdrop.addEventListener('click', this.handleBackdropClick);\r\n    document.body.appendChild(this.modalBackdrop);\r\n  }\r\n\r\n  /**\r\n   * Bind global events\r\n   * @private\r\n   */\r\n  bindGlobalEvents() {\r\n    document.addEventListener('keydown', this.handleEscapeKey);\r\n  }\r\n\r\n  /**\r\n   * Show beat selection modal\r\n   * @param {Array} beats - Array of beat objects\r\n   * @param {Function} onBeatSelect - Callback when beat is selected\r\n   * @returns {boolean} Success status\r\n   */\r\n  showBeatSelectionModal(beats = [], onBeatSelect = null) {\r\n    try {\r\n      const modalId = 'beat-selection-modal';\r\n\r\n      // Create or get modal\r\n      let modal = this.modals.get(modalId);\r\n      if (!modal) {\r\n        modal = this.createModal(modalId, this.templates.beatSelection);\r\n        this.modals.set(modalId, modal);\r\n      }\r\n\r\n      // Populate beat list\r\n      this.populateBeatList(modal, beats);\r\n\r\n      // Set callback\r\n      if (onBeatSelect && typeof onBeatSelect === 'function') {\r\n        modal.dataset.onBeatSelect = 'true';\r\n        modal.onBeatSelect = onBeatSelect;\r\n      }\r\n\r\n      // Show modal\r\n      this.showModal(modal);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error showing beat selection modal:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide beat selection modal\r\n   * @returns {boolean} Success status\r\n   */\r\n  hideBeatSelectionModal() {\r\n    return this.hideModal('beat-selection-modal');\r\n  }\r\n\r\n  /**\r\n   * Show save beat modal\r\n   * @param {Object} beatData - Beat data to save\r\n   * @param {Function} onSave - Callback when beat is saved\r\n   * @returns {boolean} Success status\r\n   */\r\n  showSaveBeatModal(beatData = {}, onSave = null) {\r\n    try {\r\n      const modalId = 'save-beat-modal';\r\n\r\n      // Create or get modal\r\n      let modal = this.modals.get(modalId);\r\n      if (!modal) {\r\n        modal = this.createModal(modalId, this.templates.saveBeat);\r\n        this.modals.set(modalId, modal);\r\n      }\r\n\r\n      // Set beat data\r\n      modal.dataset.beatData = JSON.stringify(beatData);\r\n\r\n      // Set callback\r\n      if (onSave && typeof onSave === 'function') {\r\n        modal.dataset.onSave = 'true';\r\n        modal.onSave = onSave;\r\n      }\r\n\r\n      // Show modal\r\n      this.showModal(modal);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error showing save beat modal:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide save beat modal\r\n   * @returns {boolean} Success status\r\n   */\r\n  hideSaveBeatModal() {\r\n    return this.hideModal('save-beat-modal');\r\n  }\r\n\r\n  /**\r\n   * Create modal element\r\n   * @param {string} modalId - Modal identifier\r\n   * @param {string} template - Modal HTML template\r\n   * @returns {HTMLElement} Modal element\r\n   * @private\r\n   */\r\n  createModal(modalId, template) {\r\n    const modal = document.createElement('div');\r\n    modal.id = modalId;\r\n    modal.className = 'modal';\r\n    modal.innerHTML = template;\r\n\r\n    // Set modal styles\r\n    modal.style.cssText = `\r\n      position: fixed;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%) scale(0.9);\r\n      background-color: var(--background-primary);\r\n      border: 1px solid var(--border-color);\r\n      border-radius: 8px;\r\n      padding: 24px;\r\n      min-width: 400px;\r\n      max-width: 90vw;\r\n      max-height: 90vh;\r\n      overflow-y: auto;\r\n      z-index: 9999;\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transition: all ${UI_CONFIG.ANIMATION_DURATION}ms ease;\r\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\r\n    `;\r\n\r\n    // Add close button event\r\n    const closeBtn = modal.querySelector('.modal-close');\r\n    if (closeBtn) {\r\n      closeBtn.addEventListener('click', () => this.handleModalClose(modal));\r\n    }\r\n\r\n    // Add form submit event\r\n    const form = modal.querySelector('form');\r\n    if (form) {\r\n      form.addEventListener('submit', (e) => this.handleFormSubmit(e, modal));\r\n    }\r\n\r\n    return modal;\r\n  }\r\n\r\n  /**\r\n   * Create beat selection modal template\r\n   * @returns {string} HTML template\r\n   * @private\r\n   */\r\n  createBeatSelectionTemplate() {\r\n    return `\r\n      <div class=\"modal-header\">\r\n        <h3>Load Beat</h3>\r\n        <button type=\"button\" class=\"modal-close\" aria-label=\"Close\">&times;</button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"beat-list\">\r\n          <p class=\"no-beats-message\" style=\"display: none; color: var(--text-secondary); text-align: center;\">\r\n            No saved beats found. Create and save a beat first.\r\n          </p>\r\n          <div class=\"beat-items\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"this.closest('.modal').dispatchEvent(new Event('close'))\">\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Create save beat modal template\r\n   * @returns {string} HTML template\r\n   * @private\r\n   */\r\n  createSaveBeatTemplate() {\r\n    return `\r\n      <div class=\"modal-header\">\r\n        <h3>Save Beat</h3>\r\n        <button type=\"button\" class=\"modal-close\" aria-label=\"Close\">&times;</button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <form class=\"save-beat-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"beat-name\">Beat Name:</label>\r\n            <input type=\"text\" id=\"beat-name\" name=\"beatName\" required \r\n                   maxlength=\"${VALIDATION_RULES.BEAT_NAME.maxLength}\" \r\n                   placeholder=\"Enter a name for your beat\">\r\n            <div class=\"error-message\" style=\"display: none; color: var(--error-color); font-size: 12px;\"></div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"beat-description\">Description (optional):</label>\r\n            <textarea id=\"beat-description\" name=\"beatDescription\" \r\n                      placeholder=\"Add a description for your beat\"></textarea>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" onclick=\"this.closest('.modal').dispatchEvent(new Event('close'))\">\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" form=\"save-beat-form\" class=\"btn btn-primary\">\r\n          Save Beat\r\n        </button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Populate beat list in selection modal\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @param {Array} beats - Array of beat objects\r\n   * @private\r\n   */\r\n  populateBeatList(modal, beats) {\r\n    const beatItems = modal.querySelector('.beat-items');\r\n    const noBeatsMessage = modal.querySelector('.no-beats-message');\r\n\r\n    if (!beatItems) return;\r\n\r\n    // Clear existing items\r\n    beatItems.innerHTML = '';\r\n\r\n    if (!beats || beats.length === 0) {\r\n      if (noBeatsMessage) {\r\n        noBeatsMessage.style.display = 'block';\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (noBeatsMessage) {\r\n      noBeatsMessage.style.display = 'none';\r\n    }\r\n\r\n    // Create beat items\r\n    beats.forEach((beat) => {\r\n      const beatItem = document.createElement('div');\r\n      beatItem.className = 'beat-item';\r\n      beatItem.style.cssText = `\r\n        padding: 12px;\r\n        border: 1px solid var(--border-color);\r\n        border-radius: 4px;\r\n        margin-bottom: 8px;\r\n        cursor: pointer;\r\n        transition: background-color 0.2s ease;\r\n      `;\r\n\r\n      beatItem.innerHTML = `\r\n        <div class=\"beat-name\" style=\"font-weight: bold; margin-bottom: 4px;\">${beat.name}</div>\r\n        <div class=\"beat-info\" style=\"font-size: 12px; color: var(--text-secondary);\">\r\n          Tempo: ${beat.data?.tempo || 'N/A'} BPM | \r\n          Pattern: ${beat.data?.patternLength || 'N/A'} steps |\r\n          Last used: ${new Date(beat.lastUsed).toLocaleDateString()}\r\n        </div>\r\n      `;\r\n\r\n      // Add click handler\r\n      beatItem.addEventListener('click', () => {\r\n        this.handleBeatSelection(modal, beat);\r\n      });\r\n\r\n      // Add hover effects\r\n      beatItem.addEventListener('mouseenter', () => {\r\n        beatItem.style.backgroundColor = 'var(--background-secondary)';\r\n      });\r\n\r\n      beatItem.addEventListener('mouseleave', () => {\r\n        beatItem.style.backgroundColor = 'transparent';\r\n      });\r\n\r\n      beatItems.appendChild(beatItem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle beat selection\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @param {Object} beat - Selected beat\r\n   * @private\r\n   */\r\n  handleBeatSelection(modal, beat) {\r\n    if (modal.onBeatSelect && typeof modal.onBeatSelect === 'function') {\r\n      modal.onBeatSelect(beat);\r\n    }\r\n\r\n    this.hideModal(modal.id);\r\n  }\r\n\r\n  /**\r\n   * Handle form submission\r\n   * @param {Event} event - Form submit event\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @private\r\n   */\r\n  handleFormSubmit(event, modal) {\r\n    event.preventDefault();\r\n\r\n    const formData = new FormData(event.target);\r\n    const beatName = formData.get('beatName')?.trim();\r\n    const beatDescription = formData.get('beatDescription')?.trim();\r\n\r\n    // Validate beat name\r\n    if (!beatName || beatName.length < VALIDATION_RULES.BEAT_NAME.minLength) {\r\n      this.showFormError(modal, ERROR_MESSAGES.BEAT_NAME_EMPTY);\r\n      return;\r\n    }\r\n\r\n    if (beatName.length > VALIDATION_RULES.BEAT_NAME.maxLength) {\r\n      this.showFormError(\r\n        modal,\r\n        `Beat name too long (max ${VALIDATION_RULES.BEAT_NAME.maxLength} characters)`\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Get beat data\r\n    let beatData = {};\r\n    try {\r\n      beatData = JSON.parse(modal.dataset.beatData || '{}');\r\n    } catch (error) {\r\n      console.error('Error parsing beat data:', error);\r\n      beatData = {};\r\n    }\r\n\r\n    // Create save data\r\n    const saveData = {\r\n      name: beatName,\r\n      description: beatDescription,\r\n      data: beatData\r\n    };\r\n\r\n    // Call save callback\r\n    if (modal.onSave && typeof modal.onSave === 'function') {\r\n      const result = modal.onSave(saveData);\r\n\r\n      if (result && result.success) {\r\n        this.hideModal(modal.id);\r\n      } else {\r\n        this.showFormError(modal, result?.message || 'Failed to save beat');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show form error message\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @param {string} message - Error message\r\n   * @private\r\n   */\r\n  showFormError(modal, message) {\r\n    const errorElement = modal.querySelector('.error-message');\r\n    if (errorElement) {\r\n      errorElement.textContent = message;\r\n      errorElement.style.display = 'block';\r\n\r\n      // Hide error after 5 seconds\r\n      setTimeout(() => {\r\n        errorElement.style.display = 'none';\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show modal\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @private\r\n   */\r\n  showModal(modal) {\r\n    if (this.activeModal) {\r\n      this.hideModal(this.activeModal.id);\r\n    }\r\n\r\n    // Add modal to DOM\r\n    document.body.appendChild(modal);\r\n\r\n    // Show backdrop\r\n    if (this.modalBackdrop) {\r\n      this.modalBackdrop.style.visibility = 'visible';\r\n      this.modalBackdrop.style.opacity = '1';\r\n    }\r\n\r\n    // Show modal with animation\r\n    requestAnimationFrame(() => {\r\n      modal.style.visibility = 'visible';\r\n      modal.style.opacity = '1';\r\n      modal.style.transform = 'translate(-50%, -50%) scale(1)';\r\n    });\r\n\r\n    this.activeModal = modal;\r\n\r\n    // Focus first input\r\n    const firstInput = modal.querySelector('input, textarea, button');\r\n    if (firstInput) {\r\n      firstInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide modal\r\n   * @param {string} modalId - Modal identifier\r\n   * @returns {boolean} Success status\r\n   */\r\n  hideModal(modalId) {\r\n    try {\r\n      const modal =\r\n        typeof modalId === 'string' ? this.modals.get(modalId) : modalId;\r\n      if (!modal) return false;\r\n\r\n      // Hide modal with animation\r\n      modal.style.opacity = '0';\r\n      modal.style.transform = 'translate(-50%, -50%) scale(0.9)';\r\n\r\n      setTimeout(() => {\r\n        modal.style.visibility = 'hidden';\r\n\r\n        // Remove from DOM\r\n        if (modal.parentNode) {\r\n          modal.parentNode.removeChild(modal);\r\n        }\r\n\r\n        // Hide backdrop if no other modals\r\n        if (this.activeModal === modal) {\r\n          this.activeModal = null;\r\n          if (this.modalBackdrop) {\r\n            this.modalBackdrop.style.opacity = '0';\r\n            setTimeout(() => {\r\n              this.modalBackdrop.style.visibility = 'hidden';\r\n            }, UI_CONFIG.ANIMATION_DURATION);\r\n          }\r\n        }\r\n      }, UI_CONFIG.ANIMATION_DURATION);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error hiding modal:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle modal close\r\n   * @param {HTMLElement} modal - Modal element\r\n   * @private\r\n   */\r\n  handleModalClose(modal) {\r\n    this.hideModal(modal.id);\r\n  }\r\n\r\n  /**\r\n   * Handle backdrop click\r\n   * @param {Event} event - Click event\r\n   * @private\r\n   */\r\n  handleBackdropClick(event) {\r\n    if (event.target === this.modalBackdrop && this.activeModal) {\r\n      this.hideModal(this.activeModal.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle escape key\r\n   * @param {KeyboardEvent} event - Keydown event\r\n   * @private\r\n   */\r\n  handleEscapeKey(event) {\r\n    if (event.key === 'Escape' && this.activeModal) {\r\n      this.hideModal(this.activeModal.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get selected beat from selection modal\r\n   * @returns {Object|null} Selected beat or null\r\n   */\r\n  getSelectedBeat() {\r\n    // This would be implemented based on the specific modal implementation\r\n    // For now, return null as selection is handled via callback\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get save beat data from save modal\r\n   * @returns {Object|null} Save data or null\r\n   */\r\n  getSaveBeatData() {\r\n    // This would be implemented based on the specific modal implementation\r\n    // For now, return null as save is handled via callback\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if modal is visible\r\n   * @param {string} modalId - Modal identifier\r\n   * @returns {boolean} Visibility status\r\n   */\r\n  isModalVisible(modalId) {\r\n    const modal = this.modals.get(modalId);\r\n    return modal && modal.style.visibility === 'visible';\r\n  }\r\n\r\n  /**\r\n   * Get modal state\r\n   * @returns {Object} State object\r\n   */\r\n  getState() {\r\n    return {\r\n      isInitialized: this.isInitialized,\r\n      activeModal: this.activeModal?.id || null,\r\n      totalModals: this.modals.size,\r\n      visibleModals: Array.from(this.modals.keys()).filter((id) =>\r\n        this.isModalVisible(id)\r\n      )\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy modal manager\r\n   */\r\n  destroy() {\r\n    try {\r\n      // Hide all modals\r\n      this.modals.forEach((modal, modalId) => {\r\n        this.hideModal(modalId);\r\n      });\r\n\r\n      // Remove backdrop\r\n      if (this.modalBackdrop && this.modalBackdrop.parentNode) {\r\n        this.modalBackdrop.parentNode.removeChild(this.modalBackdrop);\r\n      }\r\n\r\n      // Remove global event listeners\r\n      document.removeEventListener('keydown', this.handleEscapeKey);\r\n\r\n      // Clear references\r\n      this.modals.clear();\r\n      this.activeModal = null;\r\n      this.modalBackdrop = null;\r\n      this.isInitialized = false;\r\n    } catch (error) {\r\n      console.error('Error destroying modal manager:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ModalManager;\r\n","/**\r\n * DrumMachine - Main application orchestrator\r\n * Coordinates all managers and provides the main application interface\r\n */\r\n\r\nimport { AudioManager } from './audio/AudioManager.js';\r\nimport { BeatStorage } from './storage/BeatStorage.js';\r\nimport { PianoManager } from './piano/PianoManager.js';\r\nimport { SequencerManager } from './sequencer/SequencerManager.js';\r\nimport { ControlManager } from './controls/ControlManager.js';\r\nimport { ModalManager } from './modals/ModalManager.js';\r\nimport {\r\n  STORAGE_KEYS,\r\n  createDefaultBeat,\r\n  ERROR_MESSAGES,\r\n  SUCCESS_MESSAGES\r\n} from './config/constants.js';\r\n\r\nexport class DrumMachine {\r\n  constructor(audioManager, beatStorage, pianoManager) {\r\n    this.audioManager = audioManager;\r\n    this.beatStorage = beatStorage;\r\n    this.pianoManager = pianoManager;\r\n\r\n    // Initialize other managers\r\n    this.sequencerManager = null;\r\n    this.controlManager = null;\r\n    this.modalManager = null;\r\n\r\n    // Application state\r\n    this.currentBeat = null;\r\n    this.isInitialized = false;\r\n    this.statusElement = null;\r\n\r\n    // Bind methods\r\n    this.handleTempoChange = this.handleTempoChange.bind(this);\r\n    this.handlePatternLengthChange = this.handlePatternLengthChange.bind(this);\r\n    this.handlePlayStateChange = this.handlePlayStateChange.bind(this);\r\n    this.handleRecordingChange = this.handleRecordingChange.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize the drum machine application\r\n   */\r\n  async initialize() {\r\n    try {\r\n      console.log('🎵 Initializing Drum Machine...');\r\n\r\n      // Initialize audio manager\r\n      await this.audioManager.initialize();\r\n\r\n      // Initialize UI managers\r\n      this.initializeUIManagers();\r\n\r\n      // Set up event handlers\r\n      this.setupEventHandlers();\r\n\r\n      // Initialize application state\r\n      await this.initializeApplicationState();\r\n\r\n      // Initialize piano\r\n      await this.initializePiano();\r\n\r\n      this.isInitialized = true;\r\n      console.log('🎵 Drum Machine initialized successfully!');\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize Drum Machine:', error);\r\n      this.updateStatus(ERROR_MESSAGES.INITIALIZATION_FAILED);\r\n      return false;\r\n    }\r\n  }\r\n\r\n    /**\r\n   * Initialize UI managers\r\n   */\r\n  initializeUIManagers() {\r\n    // Get DOM containers\r\n    const sequencerContainer = document.getElementById('sequencer-grid');\r\n    \r\n    if (!sequencerContainer) {\r\n      throw new Error('Required DOM containers not found');\r\n    }\r\n\r\n    // Initialize sequencer manager\r\n    this.sequencerManager = new SequencerManager(sequencerContainer, {\r\n      onStepToggle: this.handleStepToggle.bind(this),\r\n      onPatternLengthChange: this.handlePatternLengthChange.bind(this)\r\n    });\r\n\r\n    // Initialize modal manager\r\n    this.modalManager = new ModalManager();\r\n    this.modalManager.initialize();\r\n\r\n    // Initialize UI components\r\n    this.sequencerManager.createGrid();\r\n    \r\n    // Set up event handlers for existing controls\r\n    this.setupControlEventHandlers();\r\n  }\r\n\r\n      /**\r\n   * Set up global event handlers\r\n   */\r\n  setupEventHandlers() {\r\n    // Global audio context resume on user interaction\r\n    const resumeAudioOnInteraction = async (event) => {\r\n      // Don't resume if clicking piano header (to avoid conflicts)\r\n      if (event.target.closest('#piano-header')) {\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        await this.audioManager.resumeAudioContext();\r\n      } catch (error) {\r\n        console.warn('Failed to resume audio context:', error);\r\n      }\r\n    };\r\n\r\n    // Add event listeners\r\n    document.addEventListener('click', resumeAudioOnInteraction);\r\n    document.addEventListener('touchstart', resumeAudioOnInteraction);\r\n    document.addEventListener('keydown', resumeAudioOnInteraction);\r\n\r\n    // Start audio health check\r\n    this.startAudioHealthCheck();\r\n  }\r\n\r\n  /**\r\n   * Set up event handlers for existing controls\r\n   */\r\n  setupControlEventHandlers() {\r\n    // Play button\r\n    const playBtn = document.getElementById('play-btn');\r\n    if (playBtn) {\r\n      playBtn.addEventListener('click', () => this.handlePlayStateChange(true));\r\n    }\r\n\r\n    // Stop button\r\n    const stopBtn = document.getElementById('stop-btn');\r\n    if (stopBtn) {\r\n      stopBtn.addEventListener('click', () => this.handlePlayStateChange(false));\r\n    }\r\n\r\n    // Clear button\r\n    const clearBtn = document.getElementById('clear-btn');\r\n    if (clearBtn) {\r\n      clearBtn.addEventListener('click', () => this.handleClear());\r\n    }\r\n\r\n    // Tempo control\r\n    const tempoControl = document.getElementById('tempo');\r\n    if (tempoControl) {\r\n      tempoControl.addEventListener('input', (e) => {\r\n        this.handleTempoChange(parseInt(e.target.value));\r\n      });\r\n    }\r\n\r\n    // Pattern length control\r\n    const patternLengthControl = document.getElementById('pattern-length');\r\n    if (patternLengthControl) {\r\n      patternLengthControl.addEventListener('change', (e) => {\r\n        this.handlePatternLengthChange(parseInt(e.target.value));\r\n      });\r\n    }\r\n\r\n    // Share button\r\n    const shareBtn = document.getElementById('share-btn');\r\n    if (shareBtn) {\r\n      shareBtn.addEventListener('click', () => this.shareBeat());\r\n    }\r\n\r\n    // Load button\r\n    const loadBtn = document.getElementById('load-btn');\r\n    if (loadBtn) {\r\n      loadBtn.addEventListener('click', () => this.showBeatSelectionModal());\r\n    }\r\n\r\n    // Load from URL button\r\n    const loadUrlBtn = document.getElementById('load-url-btn');\r\n    if (loadUrlBtn) {\r\n      loadUrlBtn.addEventListener('click', () => this.promptForURL());\r\n    }\r\n\r\n    // Save local button\r\n    const saveLocalBtn = document.getElementById('save-local-btn');\r\n    if (saveLocalBtn) {\r\n      saveLocalBtn.addEventListener('click', () => this.showSaveBeatModal());\r\n    }\r\n\r\n    // Theme toggle\r\n    const themeToggle = document.getElementById('theme-toggle');\r\n    if (themeToggle) {\r\n      themeToggle.addEventListener('click', () => this.toggleTheme());\r\n    }\r\n\r\n    // Drum pad buttons\r\n    document.querySelectorAll('.drum-pad').forEach((pad) => {\r\n      pad.addEventListener('click', () => this.playSound(pad.dataset.sound));\r\n    });\r\n\r\n    // Mute buttons\r\n    document.querySelectorAll('.mute-btn').forEach((btn) => {\r\n      btn.addEventListener('click', () => this.toggleMute(btn.dataset.drum));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize application state\r\n   */\r\n  async initializeApplicationState() {\r\n    try {\r\n      // Check for URL parameters first (shared beat)\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const beatData = urlParams.get('beat');\r\n\r\n      if (beatData) {\r\n        // Load shared beat from URL\r\n        await this.loadBeatFromURL(beatData);\r\n        this.updateStatus(SUCCESS_MESSAGES.BEAT_LOADED_FROM_URL);\r\n      } else {\r\n        // Load last used beat from local storage\r\n        await this.loadLastUsedBeat();\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load initial beat, using default:', error);\r\n      this.currentBeat = createDefaultBeat();\r\n      this.updateStatus('Using default beat');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize piano\r\n   */\r\n  async initializePiano() {\r\n    try {\r\n      const pianoContainer = document.getElementById('piano-keys');\r\n      if (pianoContainer) {\r\n        await this.pianoManager.initialize(pianoContainer);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to initialize piano:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prompt user for URL to load beat from\r\n   */\r\n  promptForURL() {\r\n    try {\r\n      const url = prompt('Enter the URL with beat data:');\r\n      if (url) {\r\n        const urlParams = new URLSearchParams(url.split('?')[1]);\r\n        const beatData = urlParams.get('beat');\r\n        if (beatData) {\r\n          this.loadBeatFromURL(beatData);\r\n        } else {\r\n          this.updateStatus('No beat data found in URL');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to parse URL:', error);\r\n      this.updateStatus('Invalid URL format');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load beat from URL\r\n   */\r\n  async loadBeatFromURL(beatData) {\r\n    try {\r\n      const decodedData = this.decodeBeatData(beatData);\r\n      if (decodedData) {\r\n        this.currentBeat = decodedData;\r\n        this.updateSequencerDisplay();\r\n        this.updateStatus(SUCCESS_MESSAGES.BEAT_LOADED_FROM_URL);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load beat from URL:', error);\r\n      this.updateStatus(ERROR_MESSAGES.INVALID_URL_DATA);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Load last used beat from local storage\r\n   */\r\n  async loadLastUsedBeat() {\r\n    try {\r\n      const lastUsedBeat = this.beatStorage.getLastUsedBeat();\r\n      if (lastUsedBeat) {\r\n        this.currentBeat = lastUsedBeat;\r\n        this.updateSequencerDisplay();\r\n        this.updateStatus(`Loaded: ${lastUsedBeat.name}`);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load last used beat:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Load beat by name from local storage\r\n   */\r\n  async loadBeat(name) {\r\n    try {\r\n      const beat = this.beatStorage.loadBeat(name);\r\n      if (beat) {\r\n        this.currentBeat = beat;\r\n        this.updateSequencerDisplay();\r\n        this.updateStatus(`Loaded: ${beat.name}`);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load beat:', error);\r\n      this.updateStatus(ERROR_MESSAGES.LOAD_FAILED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Save current beat\r\n   */\r\n  async saveBeat(name, overwrite = false) {\r\n    try {\r\n      if (!this.currentBeat) {\r\n        throw new Error('No beat to save');\r\n      }\r\n\r\n      const success = this.beatStorage.saveBeat(\r\n        name,\r\n        this.currentBeat,\r\n        overwrite\r\n      );\r\n      if (success) {\r\n        this.updateStatus(SUCCESS_MESSAGES.BEAT_SAVED);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save beat:', error);\r\n      this.updateStatus(ERROR_MESSAGES.SAVE_FAILED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Share current beat\r\n   */\r\n  shareBeat() {\r\n    try {\r\n      if (!this.currentBeat) {\r\n        throw new Error('No beat to share');\r\n      }\r\n\r\n      const optimizedData = this.optimizeBeatData(this.currentBeat);\r\n      const encodedData = this.encodeBeatData(optimizedData);\r\n      const shareUrl = `${window.location.origin}${window.location.pathname}?beat=${encodedData}`;\r\n\r\n      // Try to copy to clipboard\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n        navigator.clipboard\r\n          .writeText(shareUrl)\r\n          .then(() => {\r\n            this.updateStatus(SUCCESS_MESSAGES.LINK_COPIED);\r\n          })\r\n          .catch(() => {\r\n            this.fallbackCopyToClipboard(shareUrl);\r\n          });\r\n      } else {\r\n        this.fallbackCopyToClipboard(shareUrl);\r\n      }\r\n\r\n      return shareUrl;\r\n    } catch (error) {\r\n      console.error('Failed to share beat:', error);\r\n      this.updateStatus(ERROR_MESSAGES.SHARE_FAILED);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback copy to clipboard\r\n   */\r\n  fallbackCopyToClipboard(text) {\r\n    const textArea = document.createElement('textarea');\r\n    textArea.value = text;\r\n    textArea.style.position = 'fixed';\r\n    textArea.style.left = '-999999px';\r\n    textArea.style.top = '-999999px';\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();\r\n\r\n    try {\r\n      document.execCommand('copy');\r\n      this.updateStatus(SUCCESS_MESSAGES.LINK_COPIED);\r\n    } catch (error) {\r\n      console.error('Fallback copy failed:', error);\r\n      this.updateStatus(ERROR_MESSAGES.COPY_FAILED);\r\n    }\r\n\r\n    document.body.removeChild(textArea);\r\n  }\r\n\r\n  /**\r\n   * Show beat selection modal\r\n   */\r\n  showBeatSelectionModal() {\r\n    try {\r\n      const beats = this.beatStorage.loadAllBeats();\r\n      this.modalManager.showBeatSelectionModal(beats, (beat) => {\r\n        this.loadBeat(beat.name);\r\n        this.modalManager.hideBeatSelectionModal();\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to show beat selection modal:', error);\r\n      this.updateStatus(ERROR_MESSAGES.MODAL_FAILED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show save beat modal\r\n   */\r\n  showSaveBeatModal() {\r\n    try {\r\n      this.modalManager.showSaveBeatModal(\r\n        this.currentBeat,\r\n        async (name, overwrite) => {\r\n          const success = await this.saveBeat(name, overwrite);\r\n          if (success) {\r\n            this.modalManager.hideSaveBeatModal();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to show save beat modal:', error);\r\n      this.updateStatus(ERROR_MESSAGES.MODAL_FAILED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle step toggle in sequencer\r\n   */\r\n  handleStepToggle(drumType, stepIndex) {\r\n    if (!this.currentBeat || !this.currentBeat.sequencer) {\r\n      return;\r\n    }\r\n\r\n    // Toggle step state\r\n    const currentState = this.currentBeat.sequencer[drumType][stepIndex];\r\n    this.currentBeat.sequencer[drumType][stepIndex] = !currentState;\r\n\r\n    // Update display\r\n    this.sequencerManager.setStepState(drumType, stepIndex, !currentState);\r\n  }\r\n\r\n  /**\r\n   * Handle tempo change\r\n   */\r\n  handleTempoChange(tempo) {\r\n    if (this.currentBeat) {\r\n      this.currentBeat.tempo = tempo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle pattern length change\r\n   */\r\n  handlePatternLengthChange(length) {\r\n    if (this.currentBeat && this.currentBeat.sequencer) {\r\n      // Update sequencer grid size\r\n      this.sequencerManager.updateGridSize(length);\r\n\r\n      // Update all drum patterns\r\n      Object.keys(this.currentBeat.sequencer).forEach((drumType) => {\r\n        const currentPattern = this.currentBeat.sequencer[drumType];\r\n        if (currentPattern.length !== length) {\r\n          // Extend or truncate pattern\r\n          if (length > currentPattern.length) {\r\n            this.currentBeat.sequencer[drumType] = [\r\n              ...currentPattern,\r\n              ...new Array(length - currentPattern.length).fill(false)\r\n            ];\r\n          } else {\r\n            this.currentBeat.sequencer[drumType] = currentPattern.slice(\r\n              0,\r\n              length\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // Update sequencer display\r\n      this.updateSequencerDisplay();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle play state change\r\n   */\r\n  handlePlayStateChange(playing) {\r\n    if (playing) {\r\n      this.startPlayback();\r\n    } else {\r\n      this.stopPlayback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle recording change\r\n   */\r\n  handleRecordingChange(recording) {\r\n    if (recording) {\r\n      this.startRecording();\r\n    } else {\r\n      this.stopRecording();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle clear\r\n   */\r\n  handleClear() {\r\n    this.clearBeat();\r\n  }\r\n\r\n  /**\r\n   * Start playback\r\n   */\r\n  startPlayback() {\r\n    if (!this.currentBeat || !this.sequencerManager) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.sequencerManager.startPlayback(this.currentBeat.tempo);\r\n      this.updateStatus('Playing...');\r\n    } catch (error) {\r\n      console.error('Failed to start playback:', error);\r\n      this.updateStatus(ERROR_MESSAGES.PLAYBACK_FAILED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop playback\r\n   */\r\n  stopPlayback() {\r\n    if (this.sequencerManager) {\r\n      this.sequencerManager.stopPlayback();\r\n      this.updateStatus('Stopped');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start recording\r\n   */\r\n  startRecording() {\r\n    // TODO: Implement recording functionality\r\n    this.updateStatus('Recording started');\r\n  }\r\n\r\n  /**\r\n   * Play sound for drum pad\r\n   */\r\n  playSound(soundType) {\r\n    try {\r\n      if (this.audioManager && this.audioManager.isInitialized) {\r\n        // TODO: Implement actual sound playback\r\n        this.updateStatus(`Playing ${soundType} sound`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to play sound:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle mute for drum type\r\n   */\r\n  toggleMute(drumType) {\r\n    try {\r\n      // TODO: Implement mute functionality\r\n      this.updateStatus(`Toggled mute for ${drumType}`);\r\n    } catch (error) {\r\n      console.error('Failed to toggle mute:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle theme\r\n   */\r\n  toggleTheme() {\r\n    try {\r\n      const body = document.body;\r\n      const isDark = body.classList.contains('dark-theme');\r\n      \r\n      if (isDark) {\r\n        body.classList.remove('dark-theme');\r\n        localStorage.setItem('theme', 'light');\r\n        this.updateStatus('Switched to light theme');\r\n      } else {\r\n        body.classList.add('dark-theme');\r\n        localStorage.setItem('theme', 'dark');\r\n        this.updateStatus('Switched to dark theme');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to toggle theme:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop recording\r\n   */\r\n  stopRecording() {\r\n    // TODO: Implement recording functionality\r\n    this.updateStatus('Recording stopped');\r\n  }\r\n\r\n  /**\r\n   * Clear current beat\r\n   */\r\n  clearBeat() {\r\n    this.currentBeat = createDefaultBeat();\r\n    this.updateSequencerDisplay();\r\n    this.updateStatus('Beat cleared');\r\n  }\r\n\r\n  /**\r\n   * Update sequencer display\r\n   */\r\n  updateSequencerDisplay() {\r\n    if (this.sequencerManager && this.currentBeat) {\r\n      this.sequencerManager.setSequencerData(this.currentBeat.sequencer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update status display\r\n   */\r\n    updateStatus(message) {\r\n    if (!this.statusElement) {\r\n      this.statusElement = document.getElementById('status-text');\r\n    }\r\n    \r\n    if (this.statusElement) {\r\n      this.statusElement.textContent = message;\r\n    }\r\n    \r\n    console.log(`Status: ${message}`);\r\n  }\r\n\r\n  /**\r\n   * Start audio health check\r\n   */\r\n  startAudioHealthCheck() {\r\n    setInterval(() => {\r\n      if (this.audioManager) {\r\n        const health = this.audioManager.checkAudioContextHealth();\r\n        if (!health.healthy) {\r\n          console.warn('Audio context health check failed:', health.message);\r\n        }\r\n      }\r\n    }, 10000); // Check every 10 seconds\r\n  }\r\n\r\n  /**\r\n   * Optimize beat data for sharing (only include non-default values)\r\n   */\r\n  optimizeBeatData(beat) {\r\n    if (!beat || !beat.sequencer) {\r\n      return beat;\r\n    }\r\n\r\n    const optimized = {\r\n      tempo: beat.tempo,\r\n      sequencer: {}\r\n    };\r\n\r\n    // Only include drum types that have non-default patterns\r\n    Object.keys(beat.sequencer).forEach((drumType) => {\r\n      const pattern = beat.sequencer[drumType];\r\n      const hasNonDefaultValues = pattern.some((step) => step === true);\r\n\r\n      if (hasNonDefaultValues) {\r\n        // Only include steps that are true (non-default)\r\n        optimized.sequencer[drumType] = pattern\r\n          .map((step, index) => (step ? index : -1))\r\n          .filter((index) => index !== -1);\r\n      }\r\n    });\r\n\r\n    return optimized;\r\n  }\r\n\r\n  /**\r\n   * Encode beat data for URL\r\n   */\r\n  encodeBeatData(beatData) {\r\n    try {\r\n      const jsonString = JSON.stringify(beatData);\r\n      return btoa(jsonString);\r\n    } catch (error) {\r\n      console.error('Failed to encode beat data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decode beat data from URL\r\n   */\r\n  decodeBeatData(encodedData) {\r\n    try {\r\n      const jsonString = atob(encodedData);\r\n      const beatData = JSON.parse(jsonString);\r\n\r\n      // Convert optimized data back to full format\r\n      return this.expandBeatData(beatData);\r\n    } catch (error) {\r\n      console.error('Failed to decode beat data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expand optimized beat data back to full format\r\n   */\r\n  expandBeatData(optimizedData) {\r\n    if (!optimizedData || !optimizedData.sequencer) {\r\n      return createDefaultBeat();\r\n    }\r\n\r\n    const defaultBeat = createDefaultBeat();\r\n    const expanded = {\r\n      tempo: optimizedData.tempo || defaultBeat.tempo,\r\n      sequencer: {}\r\n    };\r\n\r\n    // Expand each drum type pattern\r\n    Object.keys(defaultBeat.sequencer).forEach((drumType) => {\r\n      const defaultPattern = defaultBeat.sequencer[drumType];\r\n      const patternLength = defaultPattern.length;\r\n\r\n      if (optimizedData.sequencer[drumType]) {\r\n        // Reconstruct pattern from optimized indices\r\n        const expandedPattern = new Array(patternLength).fill(false);\r\n        optimizedData.sequencer[drumType].forEach((stepIndex) => {\r\n          if (stepIndex >= 0 && stepIndex < patternLength) {\r\n            expandedPattern[stepIndex] = true;\r\n          }\r\n        });\r\n        expanded.sequencer[drumType] = expandedPattern;\r\n      } else {\r\n        // Use default pattern\r\n        expanded.sequencer[drumType] = [...defaultPattern];\r\n      }\r\n    });\r\n\r\n    return expanded;\r\n  }\r\n\r\n  /**\r\n   * Get current application state\r\n   */\r\n  getState() {\r\n    return {\r\n      isInitialized: this.isInitialized,\r\n      currentBeat: this.currentBeat,\r\n      audioManager: this.audioManager?.getState(),\r\n      beatStorage: this.beatStorage?.getState(),\r\n      pianoManager: this.pianoManager?.getState(),\r\n      sequencerManager: this.sequencerManager?.getState(),\r\n      modalManager: this.modalManager?.getState()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clean up resources\r\n   */\r\n  destroy() {\r\n    try {\r\n      // Stop playback\r\n      this.stopPlayback();\r\n\r\n      // Clean up managers\r\n      if (this.sequencerManager) {\r\n        this.sequencerManager.destroy();\r\n      }\r\n\r\n      if (this.modalManager) {\r\n        this.modalManager.destroy();\r\n      }\r\n      if (this.pianoManager) {\r\n        this.pianoManager.destroy();\r\n      }\r\n      if (this.audioManager) {\r\n        this.audioManager.destroy();\r\n      }\r\n\r\n      // Remove event listeners\r\n      document.removeEventListener('click', this.resumeAudioOnInteraction);\r\n      document.removeEventListener('touchstart', this.resumeAudioOnInteraction);\r\n      document.removeEventListener('keydown', this.resumeAudioOnInteraction);\r\n\r\n      console.log('🎵 Drum Machine destroyed');\r\n    } catch (error) {\r\n      console.error('Error during cleanup:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","/**\n * Main entry point for Drum Machine application\n * Imports all modules and initializes the application\n */\n\nimport { DrumMachine } from './DrumMachine.js';\nimport { AudioManager } from './audio/AudioManager.js';\nimport { BeatStorage } from './storage/BeatStorage.js';\nimport { PianoManager } from './piano/PianoManager.js';\nimport CONSTANTS from './config/constants.js';\n\n// Initialize drum machine when page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  try {\n    // Create managers\n    const audioManager = new AudioManager();\n    const beatStorage = new BeatStorage();\n    const pianoManager = new PianoManager(audioManager);\n\n    // Initialize main application\n    const drumMachine = new DrumMachine(\n      audioManager,\n      beatStorage,\n      pianoManager\n    );\n\n    // Make available globally for debugging (development only)\n    if (process.env.NODE_ENV === 'development') {\n      window.drumMachine = drumMachine;\n      window.audioManager = audioManager;\n      window.beatStorage = beatStorage;\n      window.pianoManager = pianoManager;\n      window.CONSTANTS = CONSTANTS;\n    }\n\n    console.log('🎵 Drum Machine initialized successfully!');\n  } catch (error) {\n    console.error('❌ Failed to initialize Drum Machine:', error);\n\n    // Show user-friendly error message\n    const statusElement = document.getElementById('status');\n    if (statusElement) {\n      statusElement.textContent =\n        'Failed to initialize. Please refresh the page.';\n    }\n  }\n});\n\n// Export for potential external use\nexport { DrumMachine, AudioManager, BeatStorage, PianoManager, CONSTANTS };\n"],"names":["AudioManager","constructor","this","audioContext","isInitialized","audioSources","Map","sampleRate","latencyHint","initialize","window","AudioContext","webkitAudioContext","navigator","userAgent","includes","state","error","resumeAudioContext","resume","resumeError","checkAudioContextHealth","healthy","message","restoreAudioContext","createBufferSource","Error","source","sourceId","Date","now","Math","random","set","onended","delete","getDestination","destination","getState","isRunning","isSuspended","isClosed","createGainNode","createGain","decodeAudioData","arrayBuffer","createAudioBuffer","numberOfChannels","length","createBuffer","stopAllSources","forEach","id","stop","clear","destroy","close","getInfo","initialized","activeSourceCount","size","TEMPO_CONFIG","DEFAULT","MIN","MAX","STEP","PATTERN_CONFIG","DEFAULT_LENGTH","OPTIONS","MIN_LENGTH","MAX_LENGTH","DRUM_TYPES","PIANO_CONFIG","TOTAL_KEYS","WHITE_KEYS","BLACK_KEYS","DEFAULT_VELOCITY","SAMPLE_RETRY_ATTEMPTS","SAMPLE_RETRY_DELAY","PIANO_KEYS","note","key","type","index","frequency","RESPONSIVE_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","DESKTOP_BREAKPOINT","STORAGE_KEYS","BEATS","THEME","MUTE_STATE","LAST_USED_BEAT","UI_CONFIG","ANIMATION_DURATION","MODAL_BACKDROP_OPACITY","TOOLTIP_DELAY","DEBOUNCE_DELAY","ERROR_MESSAGES","AUDIO_CONTEXT_FAILED","SAMPLE_LOAD_FAILED","STORAGE_FAILED","INVALID_BEAT_DATA","BEAT_NAME_EMPTY","BEAT_NAME_CONFLICT","INITIALIZATION_FAILED","INVALID_URL_DATA","LOAD_FAILED","SAVE_FAILED","SHARE_FAILED","COPY_FAILED","MODAL_FAILED","PLAYBACK_FAILED","SUCCESS_MESSAGES","BEAT_SAVED","BEAT_LOADED","BEAT_DELETED","SHARE_LINK_COPIED","THEME_CHANGED","BEAT_LOADED_FROM_URL","LINK_COPIED","STATUS_MESSAGES","LOADING_SAMPLES","LOADING_PIANO","AUDIO_SUSPENDED","AUDIO_RUNNING","AUDIO_CLOSED","DEFAULT_BEAT","tempo","patternLength","sequencer","drumType","Array","fill","createDefaultBeat","JSON","parse","stringify","VALIDATION_RULES","TEMPO","min","max","PATTERN_LENGTH","allowed","BEAT_NAME","minLength","maxLength","SAMPLE_PATHS","DRUMS","PIANO","PIANO_SAMPLE_PREFIX","PIANO_SAMPLE_EXTENSION","PIANO_LAYOUT","DESKTOP","WHITE_KEY_WIDTH","WHITE_KEY_HEIGHT","BLACK_KEY_WIDTH","BLACK_KEY_HEIGHT","BLACK_KEY_OFFSET","MOBILE","CONSTANTS","AUDIO_CONFIG","DEFAULT_SAMPLE_RATE","MOBILE_SAMPLE_RATE","LATENCY_HINT","MOBILE_LATENCY_HINT","THEME_CONFIG","LIGHT","DARK","SYSTEM","BeatStorage","storageKey","beats","loadAllBeats","saveBeat","name","data","overwrite","nameValidation","validateBeatName","valid","success","dataValidation","validateBeatData","existingBeat","getBeatByName","conflict","beat","trim","timestamp","lastUsed","findIndex","b","push","persistBeats","loadBeat","stored","localStorage","getItem","isArray","clearAllBeats","validBeats","filter","isValidBeatStructure","deleteBeat","initialCount","getLastUsedBeat","reduce","latest","current","find","beatNameExists","some","getAllBeatNames","map","getBeatCount","handleNameConflict","baseName","counter","suggestedName","trimmedName","join","cleanupCorruptedData","removedCount","exportBeats","importBeats","jsonString","importedBeats","invalidCount","addedCount","originalName","importedCount","getStorageStats","totalSize","Blob","avgBeatSize","totalBeats","averageBeatSize","round","lastUpdated","setItem","refresh","PianoManager","audioManager","pianoSamples","container","keys","activeTouches","isMobile","innerWidth","handleKeyDown","bind","handleKeyUp","handleTouchStart","handleTouchEnd","handleTouchCancel","handleResize","createPianoKeys","bindPianoEvents","loadPianoSamples","setupResponsiveHandling","innerHTML","keyData","keyElement","createKeyElement","appendChild","positionBlackKey","whiteKeyIndex","document","createElement","className","dataset","keyIndex","keyboardKey","style","height","width","left","whiteKeyTop","getWhiteKeyIndexForBlackKey","parseInt","top","right","leftPosition","blackKeyIndex","updateStatus","loadPromises","async","samplePath","toString","padStart","audioBuffer","loadPianoSampleWithRetry","successCount","Promise","allSettled","result","status","value","filePath","lastError","attempt","loadPianoSample","delay","pow","resolve","setTimeout","response","fetch","ok","statusText","playPianoKey","velocity","sample","get","playBufferSource","synthesizedSound","createSynthesizedPianoSound","duration","frameCount","floor","channelData","getChannelData","i","time","decay","exp","sin","PI","addEventListener","handleKeyPress","handleKeyRelease","event","toUpperCase","preventDefault","classList","contains","pianoKeyTouched","changedTouches","touch","touchId","identifier","element","elementFromPoint","clientX","clientY","pianoKey","closest","pianoKeyReleased","pianoKeyCancelled","add","remove","wasMobile","totalKeys","loadedSamples","removeEventListener","SequencerManager","options","drumTypes","cellSize","cellGap","grid","isPlaying","currentStep","animationFrame","initializeGrid","handleCellClick","handleCellHover","updateGridDisplay","stepMap","step","createGrid","rowIndex","row","gridTemplateColumns","cell","drum","bindGridEvents","stepIndex","undefined","toggleStep","updateCellDisplay","onStepToggle","isHovering","backgroundColor","opacity","getStepState","borderColor","querySelector","validateStep","newState","setStepState","Boolean","updateGridSize","newLength","validatePatternLength","clearGrid","getSequencerData","from","values","setSequencerData","Object","entries","steps","optimizeSequencerData","optimized","activeSteps","isActive","getStatistics","stats","totalSteps","totalDrumTypes","drumTypeStats","activeCount","active","total","percentage","totalActivePercentage","startPlayback","bpm","stepDuration","lastStepTime","animate","currentTime","highlightCurrentStep","requestAnimationFrame","stopPlayback","cancelAnimationFrame","clearStepHighlighting","boxShadow","transform","transition","querySelectorAll","gridData","statistics","ModalManager","modals","activeModal","modalBackdrop","templates","beatSelection","createBeatSelectionTemplate","createSaveBeatTemplate","handleModalClose","handleBackdropClick","handleEscapeKey","handleFormSubmit","createModalBackdrop","bindGlobalEvents","cssText","body","showBeatSelectionModal","onBeatSelect","modalId","modal","createModal","populateBeatList","showModal","hideBeatSelectionModal","hideModal","showSaveBeatModal","beatData","onSave","hideSaveBeatModal","template","closeBtn","form","e","beatItems","noBeatsMessage","display","beatItem","toLocaleDateString","handleBeatSelection","formData","FormData","target","beatName","beatDescription","showFormError","saveData","description","errorElement","textContent","visibility","firstInput","focus","parentNode","removeChild","getSelectedBeat","getSaveBeatData","isModalVisible","totalModals","visibleModals","DrumMachine","beatStorage","pianoManager","sequencerManager","controlManager","modalManager","currentBeat","statusElement","handleTempoChange","handlePatternLengthChange","handlePlayStateChange","handleRecordingChange","handleClear","initializeUIManagers","setupEventHandlers","initializeApplicationState","initializePiano","sequencerContainer","getElementById","handleStepToggle","onPatternLengthChange","setupControlEventHandlers","resumeAudioOnInteraction","startAudioHealthCheck","playBtn","stopBtn","clearBtn","tempoControl","patternLengthControl","shareBtn","shareBeat","loadBtn","loadUrlBtn","promptForURL","saveLocalBtn","themeToggle","toggleTheme","pad","playSound","sound","btn","toggleMute","URLSearchParams","location","search","loadBeatFromURL","loadLastUsedBeat","pianoContainer","url","prompt","split","decodedData","decodeBeatData","updateSequencerDisplay","lastUsedBeat","optimizedData","optimizeBeatData","encodedData","encodeBeatData","shareUrl","origin","pathname","clipboard","isSecureContext","writeText","then","catch","fallbackCopyToClipboard","text","textArea","position","select","execCommand","currentState","currentPattern","slice","playing","recording","startRecording","stopRecording","clearBeat","soundType","setInterval","pattern","btoa","atob","expandBeatData","defaultBeat","expanded","defaultPattern","expandedPattern","drumMachine","process","env","NODE_ENV"],"mappings":"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"}